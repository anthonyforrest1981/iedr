package pl.nask.crs.payment;

import java.math.BigDecimal;
import java.util.Date;

import pl.nask.crs.ticket.FinancialStatus;
import pl.nask.crs.vat.PriceWithVat;
import pl.nask.crs.vat.ProductPriceWithVat;

public class Reservation {

    private final long id;
    private final String nicHandleId;
    private final String domainName;
    private final int durationMonths;
    private final Date creationDate;
    private final PriceWithVat priceWithVat;
    private final Integer productId;
    private boolean readyForSettlement;
    private boolean settled;
    private Date settledDate;
    private final Long ticketId;
    private final Long transactionId;
    private final OperationType operationType;
    // reservation period == period for which the domain is being paid for
    private Date startDate;
    private Date endDate;
    private final PaymentMethod paymentMethod;
    /**
     * Probably not in use any more!
     *
     * @deprecated
     */
    private String invoiceNumber;

    private String orderId;
    private FinancialStatus ticketFinancialStatus;
    private boolean ticketExists;

    public static Reservation newInstanceForTicket(String nicHandleId, String domainName, int durationMonths,
            ProductPriceWithVat productPriceWithVat, Long ticketId, Long transactionId, OperationType operationType,
            PaymentMethod paymentMethod) {
        return new Reservation(-1, nicHandleId, domainName, durationMonths, new Date(), productPriceWithVat, false,
                false, null, ticketId, transactionId, operationType, paymentMethod, null, null, null, true);
    }

    public static Reservation newInstanceForRenewal(String nicHandleId, String domainName, int durationMonths,
            ProductPriceWithVat productPriceWithVat, long transactionId, PaymentMethod paymentMethod) {
        return new Reservation(-1, nicHandleId, domainName, durationMonths, new Date(), productPriceWithVat, true,
                false, null, null, transactionId, OperationType.RENEWAL, paymentMethod, null, null, null, false);
    }

    public static Reservation newInstanceForSecondaryMarketRequest(String nicHandleId, String domainName,
            PriceWithVat priceWithVat, long transactionId, OperationType operationType, PaymentMethod paymentMethod) {
        return new Reservation(-1, nicHandleId, domainName, 0, new Date(), priceWithVat, null, true, false, null, null,
                transactionId, operationType, paymentMethod, null, null, null, false);
    }

    public static Reservation recreatedInstanceForTicket(String nicHandleId, String domainName, int durationMonths,
            ProductPriceWithVat productPriceWithVat, Long ticketId, long transactionId, OperationType operationType,
            PaymentMethod paymentMethod, boolean readyForSettlement) {
        return new Reservation(-1, nicHandleId, domainName, durationMonths, new Date(), productPriceWithVat,
                readyForSettlement, false, null, ticketId, transactionId, operationType, paymentMethod, null, null,
                null, true);
    }

    public Reservation(long id, String nicHandleId, String domainName, int durationMonths, Date creationDate,
            ProductPriceWithVat productPriceWithVat, boolean readyForSettlement, boolean settled, Date settledDate,
            Long ticketId, Long transactionId, OperationType operationType, PaymentMethod paymentMethod,
            String invoiceNumber, String orderId, FinancialStatus ticketFinancialStatus, boolean ticketExists) {
        this(id, nicHandleId, domainName, durationMonths, creationDate, productPriceWithVat,
                productPriceWithVat.getProductId(), readyForSettlement, settled, settledDate, ticketId, transactionId,
                operationType, paymentMethod, invoiceNumber, orderId, ticketFinancialStatus, ticketExists);
    }

    public Reservation(long id, String nicHandleId, String domainName, int durationMonths, Date creationDate,
            PriceWithVat priceWithVat, Integer productId, boolean readyForSettlement, boolean settled, Date settledDate,
            Long ticketId, Long transactionId, OperationType operationType, PaymentMethod paymentMethod,
            String invoiceNumber, String orderId, FinancialStatus ticketFinancialStatus, boolean ticketExists) {
        //id is generated by db
        this.id = id;
        this.nicHandleId = nicHandleId;
        this.domainName = domainName;
        this.durationMonths = durationMonths;
        this.creationDate = creationDate;
        this.priceWithVat = priceWithVat;
        this.productId = productId;
        this.readyForSettlement = readyForSettlement;
        this.settled = settled;
        this.settledDate = settledDate;
        this.ticketId = ticketId;
        this.transactionId = transactionId;
        this.operationType = operationType;
        this.paymentMethod = paymentMethod;
        this.invoiceNumber = invoiceNumber;
        this.orderId = orderId;
        this.ticketFinancialStatus = ticketFinancialStatus;
        this.ticketExists = ticketExists;
    }

    public void markSettled(Date settledDate) {
        if (!settled) {
            settled = true;
            this.settledDate = settledDate;
        }
    }

    public void setReadyForSettlement(boolean readyForSettlement) {
        this.readyForSettlement = readyForSettlement;
    }

    public long getId() {
        return id;
    }

    public String getNicHandleId() {
        return nicHandleId;
    }

    public String getDomainName() {
        return domainName;
    }

    public int getDurationMonths() {
        return durationMonths;
    }

    public Date getCreationDate() {
        return creationDate;
    }

    public Integer getProductId() {
        return productId;
    }

    public BigDecimal getNetAmount() {
        return priceWithVat.getNetAmount();
    }

    public int getVatId() {
        return priceWithVat.getVat().getId();
    }

    public String getVatCategory() {
        return priceWithVat.getVat().getCategory();
    }

    public BigDecimal getVatRate() {
        return priceWithVat.getVat().getVatRate();
    }

    public BigDecimal getVatAmount() {
        return priceWithVat.getVatAmount();
    }

    public BigDecimal getTotal() {
        return priceWithVat.getTotal();
    }

    public boolean isReadyForSettlement() {
        return readyForSettlement;
    }

    public boolean isSettled() {
        return settled;
    }

    public Date getSettledDate() {
        return settledDate;
    }

    public Long getTicketId() {
        return ticketId;
    }

    public Long getTransactionId() {
        return transactionId;
    }

    public OperationType getOperationType() {
        return operationType;
    }

    public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    /**
     * Reservation end date (domain renewal date)
     * @return
     */
    public Date getEndDate() {
        return endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    public String getInvoiceNumber() {
        return invoiceNumber;
    }

    @Override
    public String toString() {
        return String
                .format("Reservation[id: %s, nicHandleId: %s, domainName: %s, netAmount: %s, vatAmount: %s, readyForSettlement: %s, settled: %s, period.start: %s, period.end: %s]",
                        id, nicHandleId, domainName, priceWithVat.getNetAmount(), priceWithVat.getVatAmount(),
                        readyForSettlement, settled, startDate, endDate);
    }

    public PaymentMethod getPaymentMethod() {
        return paymentMethod;
    }

    public String getOrderId() {
        return orderId;
    }

    public FinancialStatus getTicketFinancialStatus() {
        return ticketFinancialStatus;
    }

    public boolean getTicketExists() {
        return ticketExists;
    }
}
