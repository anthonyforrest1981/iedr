<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap
        PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
        "sql-map-2.dtd">

<sqlMap namespace="extended-domain">

    <resultMap id="extendedDomainResult"
        class="pl.nask.crs.domains.dao.ibatis.objects.InternalExtendedDomain"
        extends="domain.domainResult">
        <result property="pendingReservationPaymentMethod" column="pendingReservationPaymentMethod"
                typeHandler="pl.nask.crs.payment.dao.ibatis.handlers.PaymentMethodHandler" />
    </resultMap>

    <sql id="extendedDomainSql">
        <include refid="plain-domain.basicDomainSql" />
        D.A_Number as resellerAccountId,
        A.A_Name as resellerAccountName,
        A.Billing_NH as resellerAccountBillingContact,
        D.D_Change_TS as changeDate,
        D.D_Remark as remark,
        D.D_ClikPaid as clikPaid,
        D.D_Transfer_TS as transferDate,
        IF(R.Ready_For_Settlement = 'YES' and R.Settled = 'NO',
            R.Payment_Method, NULL) as pendingReservationPaymentMethod
        from
        Domain as D
        left join Account as A on (D.A_Number = A.A_Number)
        left join Class as CL ON (CL.id = D.Class_Id)
        left join Category as CT ON (CT.id = D.Category_Id)
        left join Subcategory as SCT ON (SCT.id = D.Subcategory_Id)
        join DSM_State as DSM on (D.DSM_State=DSM.State)
        left join Zone_Published as ZP on (D.D_Name = ZP.D_Name)
        left join Reservation as R ON (D.D_Name = R.Domain_Name)
    </sql>

    <sql id="extendedDomainCriteria">
        <include refid="domain.domainCriteria" />
        <isEqual prepend="and" property="criteria.currentRenewal" compareValue="true">
            ((R.Ready_For_Settlement IS NULL AND R.Settled IS NULL) OR
            R.Ready_For_Settlement = 'NO' OR R.Settled = 'YES')
        </isEqual>
        <isEqual prepend="and" property="criteria.futureRenewal" compareValue="true">
            D.D_Ren_Dt >= LAST_DAY(CURDATE()) + INTERVAL 1 DAY
        </isEqual>
    </sql>

    <select id="getExtendedDomainByName" parameterClass="java.lang.String" resultMap="extendedDomainResult">
        <include refid="extendedDomainSql" />
        where
        D.D_Name = #name,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
    </select>

    <select id="findExtendedDomain" parameterClass="java.util.Map" resultMap="extendedDomainResult">
        <include refid="extendedDomainSql" />
        <include refid="domain.nicHandleFullJoin" />
        <include refid="extendedDomainCriteria" />
        group by D.D_Name
        <include refid="common.sortFrag" />
        <include refid="common.limitFrag" />
    </select>

    <select id="countFindExtendedDomain" parameterClass="java.util.Map"
        resultClass="int">
        select
        count(distinct(D.D_Name)) as CNT
        from
        Domain as D
        join DSM_State as DSM on (D.DSM_State = DSM.State)
        left join Class as CL ON (CL.id = D.Class_Id)
        left join Category as CT ON (CT.id = D.Category_Id)
        left join Subcategory as SCT ON (SCT.id = D.Subcategory_Id)
        left join Account as A on (D.A_Number = A.A_Number)
        left join Reservation as R ON (D.D_Name = R.Domain_Name)
        <include refid="domain.nicHandleFullJoin" />
        <include refid="extendedDomainCriteria" />
    </select>

</sqlMap>