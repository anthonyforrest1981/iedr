<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap
        PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
        "sql-map-2.dtd">

<sqlMap namespace="plain-domain">
    <resultMap id="dsmState" class="pl.nask.crs.domains.DsmState">
        <result property="id" column="dsmStateId" nullValue="-1" />
        <result property="locked" column="dsmLocked"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.NullableCharToBooleanHandler" />
        <result property="customerType" column="dsmCustomerType"
            typeHandler="pl.nask.crs.domains.dao.ibatis.handlers.CustomerTypeHandler" />
        <result property="nrpStatus" column="dsmNrpStatus"
            typeHandler="pl.nask.crs.domains.dao.ibatis.handlers.NrpStatusHandler" />
        <result property="renewalMode" column="dsmRenewalMode"
            typeHandler="pl.nask.crs.domains.dao.ibatis.handlers.RenewalModeHandler" />
        <result property="domainHolderType" column="dsmHolderType"
            typeHandler="pl.nask.crs.domains.dao.ibatis.handlers.HolderTypeHandler" />
        <result property="secondaryMarketStatus" column="dsmSecondaryMarketStatus"
            typeHandler="pl.nask.crs.domains.dao.ibatis.handlers.SecondaryMarketStatusHandler" />
        <result property="published" column="dsmPublished"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.NullableCharToBooleanHandler" />
    </resultMap>

    <resultMap id="plainDomain" class="pl.nask.crs.domains.PlainDomain">
        <result property="name" column="domainName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.LooseStringHandler" />
        <result property="holder" column="domainHolder"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.LooseStringHandler" />
        <result property="registrationDate" column="registrationDate" />
        <result property="renewalDate" column="renewalDate" />
        <result property="transferDate" column="transferDate" />
        <result property="suspensionDate" column="suspensionDate" />
        <result property="deletionDate" column="deletionDate" />
        <result property="lockingDate" column="lockingDate" />
        <result property="lockingRenewalDate" column="lockingRenewalDate" />
        <result property="dsmState" resultMap="plain-domain.dsmState" />
        <result property="zonePublished" column="zonePublished" />
        <result property="authCode" column="authCode"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.LooseStringHandler" />
        <result property="holderClass" resultMap="entities.entityClass" />
        <result property="holderCategory" resultMap="entities.entityCategory" />
        <result property="holderSubcategory" resultMap="entities.entitySubcategory" />
        <result property="authCode" column="authCode"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.LooseStringHandler" />
        <result property="authCodeExpirationDate" column="authCodeExpirationDate" />
        <result property="authCodePortalCount" column="authCodePortalCount" />
        <result property="billingNH" column="billingNH"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.LooseStringHandler" />
        <result property="accountId" column="accountId" />
    </resultMap>

    <resultMap id="looseSimpleDomainResult"
        class="pl.nask.crs.domains.dao.ibatis.objects.InternalDomain" extends="plainDomain">
        <result property="resellerAccountId" column="resellerAccountId" />
        <result property="resellerAccountName" column="resellerAccountName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.LooseStringHandler" />
        <result property="resellerAccountBillingContact" column="resellerAccountBillingContact"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="changeDate" column="changeDate" />
        <result property="remark" column="remark"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.LooseStringHandler" />
        <result property="clikPaid" column="clikPaid"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler" />
        <result property="pendingCCReservations" column="pendingCCReservations"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler" />
        <result property="pendingADPReservations" column="pendingADPReservations"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler" />
    </resultMap>

    <sql id="basicDomainSql">
        SELECT
        D.D_Name as domainName,
        D.D_Holder as domainHolder,
        D.D_Reg_TS as registrationDate,
        D.D_Ren_Dt as renewalDate,
        D.D_Susp_Dt as suspensionDate,
        D.D_Del_Dt as deletionDate,
        D.D_Authcode as authCode,
        D.D_Authc_Exp_Dt as authCodeExpirationDate,
        D.D_Authc_Portal_Cnt as authCodePortalCount,
        D.Class_Id as classId,
        CL.name as className,
        D.Category_Id as categoryId,
        CT.name as categoryName,
        D.Subcategory_Id as subcategoryId,
        SCT.name as subcategoryName,
        D.DSM_State as dsmStateId,
        DSM.D_Holder_Type as dsmHolderType,
        DSM.Renewal_Mode as dsmRenewalMode,
        DSM.Locked as dsmLocked,
        DSM.Cust_Type as dsmCustomerType,
        DSM.NRP_Status as dsmNrpStatus,
        DSM.Secondary_Market_Status as dsmSecondaryMarketStatus,
        DSM.Published as dsmPublished,
        (ZP.D_Name is not null and ZP.Committed is not null) as zonePublished,
        D.D_Locking_TS as lockingDate,
        D.D_LockingRenewal_Dt as lockingRenewalDate,
    </sql>

    <sql id="plainDomainSql">
        <include refid="basicDomainSql" />
        D.D_Transfer_TS as transferDate,
        C.Contact_NH as billingNH,
        D.A_Number as accountId
    </sql>

    <sql id="transferredDomainSql">
        <include refid="basicDomainSql" />
        TH.Transfer_TS as transferDate,
        NH.Nic_Handle as billingNH,
        A.A_Number as accountId
    </sql>

    <sql id="plainDomainJoin">
        FROM Domain D
        JOIN Contact C ON (C.D_Name = D.D_Name AND C.Type = "Billing")
        JOIN DSM_State as DSM ON (D.DSM_State = DSM.State)
        LEFT JOIN Zone_Published as ZP ON (D.D_Name = ZP.D_Name)
        LEFT JOIN Class as CL ON (CL.id = D.Class_Id)
        LEFT JOIN Category as CT ON (CT.id = D.Category_Id)
        LEFT JOIN Subcategory as SCT ON (SCT.id = D.Subcategory_Id)
    </sql>

    <sql id="basicDomainCriteria">
        <isNotNull prepend="and" property="criteria.domainName">
            D.D_Name like
            #criteria.domainName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringPrefixHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.domainHolder">
            D.D_Holder like
            #criteria.domainHolder,handler=pl.nask.crs.commons.dao.ibatis.handlers.SubstringHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.registrationDate">
            D.D_Reg_TS like
            Date_Format(#criteria.registrationDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
            '%Y-%m-%d%')
        </isNotNull>
        <isNotNull prepend="and" property="criteria.renewalDate">
            D.D_Ren_Dt like
            Date_Format(#criteria.renewalDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
            '%Y-%m-%d%')
        </isNotNull>
        <isNotNull prepend="and" property="criteria.registrationFrom">
            D.D_Reg_TS >=
            #criteria.registrationFrom,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.registrationTo">
            D.D_Reg_TS <![CDATA[<=]]>
            #criteria.registrationTo,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.renewalFrom">
            D.D_Ren_Dt >=
            #criteria.renewalFrom,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.renewalTo">
            D.D_Ren_Dt <![CDATA[<=]]>
            #criteria.renewalTo,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.suspensionFrom">
            D.D_Susp_Dt >=
            #criteria.suspensionFrom,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.suspensionTo">
            D.D_Susp_Dt <![CDATA[<=]]>
            #criteria.suspensionTo,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.deletionFrom">
            D.D_Del_Dt >=
            #criteria.deletionFrom,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.deletionTo">
            D.D_Del_Dt <![CDATA[<=]]>
            #criteria.deletionTo,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.authcExpFrom">
            D.D_Authc_Exp_Dt >=
            #criteria.authcExpFrom,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.authcExpTo">
            D.D_Authc_Exp_Dt <![CDATA[<=]]>
            #criteria.authcExpTo,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.lockFrom">
            D.D_Locking_TS >=
            #criteria.lockFrom,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.lockTo">
            D.D_Locking_TS <![CDATA[<=]]>
            #criteria.lockTo,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.lockRenewalFrom">
            D.D_LockingRenewal_Dt >=
            #criteria.lockRenewalFrom,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.lockRenewalTo">
            D.D_LockingRenewal_Dt <![CDATA[<=]]>
            #criteria.lockRenewalTo,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.holderClassId">
            D.Class_Id = #criteria.holderClassId#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.holderCategoryId">
            D.Category_Id = #criteria.holderCategoryId#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.holderClassName">
            CL.name LIKE
            #criteria.holderClassName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringPrefixHandler#
        </isNotNull>
        <isNotNull prepend="and" property="criteria.holderCategoryName">
            CT.name LIKE
            #criteria.holderCategoryName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringPrefixHandler#
        </isNotNull>
        <isNotEmpty prepend="and" property="criteria.renewalModes">
            DSM.Renewal_Mode IN
            <iterate property="criteria.renewalModes" open="("
                close=")" conjunction=",">
                #criteria.renewalModes[],handler=pl.nask.crs.domains.dao.ibatis.handlers.RenewalModeHandler#
            </iterate>
        </isNotEmpty>
        <isNotEmpty prepend="and" property="criteria.nrpStatuses">
            DSM.NRP_Status IN
            <iterate property="criteria.nrpStatuses" open="("
                close=")" conjunction=",">
                #criteria.nrpStatuses[],handler=pl.nask.crs.domains.dao.ibatis.handlers.NrpStatusHandler#
            </iterate>
        </isNotEmpty>
        <isNotEmpty prepend="and" property="criteria.secondaryMarketStatuses">
            DSM.Secondary_Market_Status IN
            <iterate property="criteria.secondaryMarketStatuses" open="("
                close=")" conjunction=",">
                #criteria.secondaryMarketStatuses[],handler=pl.nask.crs.domains.dao.ibatis.handlers.SecondaryMarketStatusHandler#
            </iterate>
        </isNotEmpty>
        <isNotEmpty prepend="and" property="criteria.holderTypes">
            DSM.D_Holder_Type IN
            <iterate property="criteria.holderTypes" open="("
                close=")" conjunction=",">
                #criteria.holderTypes[],handler=pl.nask.crs.domains.dao.ibatis.handlers.HolderTypeHandler#
            </iterate>
        </isNotEmpty>
        <isNotEmpty prepend="and" property="criteria.locked">
            DSM.Locked = #criteria.locked,handler=pl.nask.crs.commons.dao.ibatis.handlers.NullableCharToBooleanHandler#
        </isNotEmpty>
        <isEqual prepend="and" property="criteria.lockingActive"
            compareValue="true">
            (DSM.Locked = 'YES' or D.D_Locking_TS is not
            null or D.D_LockingRenewal_Dt is not null)
        </isEqual>
    </sql>

    <sql id="plainDomainCriteria">
        <dynamic prepend="where">
            <include refid="basicDomainCriteria" />
            <isNotNull prepend="and" property="criteria.transferFrom">
                D.D_Transfer_TS >=
                #criteria.transferFrom,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.transferTo">
                D.D_Transfer_TS <![CDATA[<=]]>
                #criteria.transferTo,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.transferDate">
                D.D_Transfer_TS like
                Date_Format(#criteria.transferDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
                '%Y-%m-%d%')
            </isNotNull>
            <isNotNull prepend="and" property="criteria.billingNH">
                C.Contact_NH like
                #criteria.billingNH,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringPrefixHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.accountId">
                D.A_Number = #criteria.accountId#
            </isNotNull>
        </dynamic>
    </sql>

    <sql id="transferredDomainCriteria">
        <include refid="basicDomainCriteria" />
        <dynamic>
            <isNotNull prepend="and" property="criteria.transferFrom">
                DATE_FORMAT(TH.Transfer_TS, '%Y-%m-%d') >=
                DATE_FORMAT(#criteria.transferFrom,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
                '%Y-%m-%d')
            </isNotNull>
            <isNotNull prepend="and" property="criteria.transferTo">
                DATE_FORMAT(TH.Transfer_TS, '%Y-%m-%d') <![CDATA[<=]]>
                DATE_FORMAT(#criteria.transferTo,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
                '%Y-%m-%d')
            </isNotNull>
            <isNotNull prepend="and" property="criteria.transferDate">
                TH.Transfer_TS like
                Date_Format(#criteria.transferDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
                '%Y-%m-%d%')
            </isNotNull>
        </dynamic>
    </sql>

    <select id="findPlainDomain" parameterClass="java.util.Map" resultMap="plainDomain">
        <include refid="plainDomainSql" />
        <include refid="plainDomainJoin" />
        <include refid="plainDomainCriteria" />
        <include refid="common.sortFrag" />
        <include refid="common.limitFrag" />
    </select>

    <select id="findPlainDomainCount" parameterClass="java.util.Map" resultClass="int">
        SELECT COUNT(D.D_Name)
        <include refid="plainDomainJoin" />
        <include refid="plainDomainCriteria" />
    </select>

    <!--
    Here we need to find newest entry in DomainHist that has billingNH as its billing contact.
    The problem is that Chng_Id is not monotonic so we cannot just take MAX(Chng_Id), we must
    take MAX(Chng_TS). In one second there can be many DomainHist entries, so among all those from
    MAX(Chng_TS) we take the one with max Chng_Id. That's the reason for double inner selects.
    Inner filters on D_Name and transferFrom help keep performance reasonable.
    -->
    <sql id="transfersHistJoinedToCurrentDomainHist">
        TransfersHist AS TH
        LEFT JOIN (
            SELECT id.D_Name, MAX(id.Chng_Id) AS Chng_Id
            FROM DomainHist id
            LEFT JOIN (
                SELECT iid.D_Name, max(iid.Chng_TS) AS Chng_TS
                FROM DomainHist iid
                LEFT JOIN ContactHist iic ON iic.Chng_Id = iid.Chng_Id AND iic.Type = "Billing"
                LEFT JOIN NicHandleHist iinh ON iic.Nic_Handle_Chng_Id = iinh.Chng_Id
                WHERE iinh.Nic_Handle = #criteria.billingNH,handler=pl.nask.crs.commons.dao.ibatis.handlers.LooseStringHandler#
                AND iid.D_Name IN (
                    SELECT D_Name FROM TransfersHist
                    WHERE New_Nic_Handle = #criteria.billingNH,handler=pl.nask.crs.commons.dao.ibatis.handlers.LooseStringHandler#
                    )
                <dynamic>
                    <isNotNull prepend="and" property="criteria.transferFrom">
                        DATE_FORMAT(iid.Chng_TS, '%Y-%m-%d') >=
                        DATE_FORMAT(#criteria.transferFrom,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
                        '%Y-%m-%d')
                    </isNotNull>
                </dynamic>
                GROUP BY iid.D_Name
                ) iidt ON (id.D_Name = iidt.D_Name and id.Chng_TS = iidt.Chng_TS)
            LEFT JOIN ContactHist ic ON ic.Chng_Id = id.Chng_Id AND ic.Type = "Billing"
            LEFT JOIN NicHandleHist inh ON ic.Nic_Handle_Chng_Id = inh.Chng_Id
            WHERE inh.Nic_Handle = #criteria.billingNH,handler=pl.nask.crs.commons.dao.ibatis.handlers.LooseStringHandler#
            AND iidt.Chng_TS IS NOT NULL
            AND id.D_Name IN (
                SELECT D_Name FROM TransfersHist
                WHERE New_Nic_Handle = #criteria.billingNH,handler=pl.nask.crs.commons.dao.ibatis.handlers.LooseStringHandler#
            )
            <dynamic>
                <isNotNull prepend="and" property="criteria.transferFrom">
                    DATE_FORMAT(id.Chng_TS, '%Y-%m-%d') >=
                    DATE_FORMAT(#criteria.transferFrom,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
                    '%Y-%m-%d')
                </isNotNull>
            </dynamic>
            GROUP BY id.D_Name
            ) table_of_max_chng_id ON TH.D_Name = table_of_max_chng_id.D_Name
        LEFT JOIN DomainHist D ON D.Chng_Id = table_of_max_chng_id.Chng_Id
        LEFT JOIN ContactHist C ON C.Chng_Id = D.Chng_Id AND C.Type = "Billing"
        LEFT JOIN NicHandleHist NH ON NH.Chng_Id = C.Nic_Handle_Chng_ID
        LEFT JOIN AccountHist as A ON (A.Chng_ID = D.Account_Chng_ID)
    </sql>

    <select id="findTransferredInDomains" parameterClass="java.util.Map" resultMap="plainDomain">
        <include refid="transferredDomainSql" />
        FROM
        <include refid="transfersHistJoinedToCurrentDomainHist"/>
        LEFT JOIN Class as CL ON (CL.id = D.Class_Id)
        LEFT JOIN Category as CT ON (CT.id = D.Category_Id)
        LEFT JOIN Subcategory as SCT ON (SCT.id = D.Subcategory_Id)
        LEFT JOIN DSM_State as DSM ON (D.DSM_State = DSM.State)
        LEFT JOIN Zone_Published as ZP ON (D.D_Name = ZP.D_Name)
        WHERE
        TH.New_Nic_Handle = #criteria.billingNH,handler=pl.nask.crs.commons.dao.ibatis.handlers.LooseStringHandler#
        <include refid="transferredDomainCriteria" />
        <include refid="common.sortFrag" />
        <include refid="common.limitFrag" />
    </select>

    <select id="findTransferredAwayDomains" parameterClass="java.util.Map" resultMap="plainDomain">
        <include refid="transferredDomainSql" />
        FROM
        TransfersHist as TH
        LEFT JOIN DomainHist as D ON (TH.Transferred_Domain_Chng_ID = D.Chng_ID)
        LEFT JOIN ContactHist C ON C.Chng_Id = D.Chng_Id AND C.Type = "Billing"
        LEFT JOIN NicHandleHist NH ON NH.Chng_Id = C.Nic_Handle_Chng_ID
        LEFT JOIN Class as CL ON (CL.id = D.Class_Id)
        LEFT JOIN Category as CT ON (CT.id = D.Category_Id)
        LEFT JOIN Subcategory as SCT ON (SCT.id = D.Subcategory_Id)
        LEFT JOIN DSM_State as DSM ON (D.DSM_State = DSM.State)
        LEFT JOIN Zone_Published as ZP ON (D.D_Name = ZP.D_Name)
        LEFT JOIN AccountHist as A ON (A.Chng_ID = D.Account_Chng_ID)
        WHERE
        TH.Old_Nic_Handle = #criteria.billingNH,handler=pl.nask.crs.commons.dao.ibatis.handlers.LooseStringHandler#
        <include refid="transferredDomainCriteria" />
        <include refid="common.sortFrag" />
        <include refid="common.limitFrag" />
    </select>

    <select id="findTransferredInDomainsCount" parameterClass="java.util.Map" resultClass="int">
        SELECT
        COUNT(TH.D_Name) AS CNT
        FROM
        <include refid="transfersHistJoinedToCurrentDomainHist"/>
        WHERE
        TH.New_Nic_Handle = #criteria.billingNH,handler=pl.nask.crs.commons.dao.ibatis.handlers.LooseStringHandler#
        <include refid="transferredDomainCriteria" />
    </select>

    <select id="findTransferredAwayDomainsCount" parameterClass="java.util.Map" resultClass="int">
        SELECT
        COUNT(TH.D_Name) as CNT
        FROM
        TransfersHist as TH
        LEFT JOIN DomainHist as D ON (TH.Transferred_Domain_Chng_ID = D.Chng_ID)
        WHERE
        TH.Old_Nic_Handle = #criteria.billingNH,handler=pl.nask.crs.commons.dao.ibatis.handlers.LooseStringHandler#
        <include refid="transferredDomainCriteria" />
    </select>

</sqlMap>