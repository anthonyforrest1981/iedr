<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "sql-map-2.dtd">

<sqlMap namespace="domain-price">

    <!--TODO domain price cache -->
    <cacheModel id="domainPriceCache" type="LRU">
        <flushInterval minutes="15" />
        <property name="size" value="1000" />
        <flushOnExecute statement="domain-price.create" />
        <flushOnExecute statement="domain-price.update" />
    </cacheModel>

    <resultMap id="domainPriceResult" class="pl.nask.crs.price.DomainPrice">
        <result property="id" column="id" />
        <result property="code" column="code"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="description" column="description"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="price" column="price"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.MonetaryBigDecimalHandler" />
        <result property="duration" column="duration" />
        <result property="validFrom" column="validFrom" />
        <result property="validTo" column="validTo" />
        <result property="defaultPrice" column="defaultPrice"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler" />
        <result property="forRegistration" column="forRegistration"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler" />
        <result property="forRenewal" column="forRenewal"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler" />
        <result property="direct" column="direct"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler" />
    </resultMap>

    <sql id="selectPrice">
        SELECT
        Id as id,
        P_Code as code,
        P_Description as description,
        P_Price as price,
        P_Duration as duration,
        P_Default as defaultPrice,
        P_Valid_From_Dt as validFrom,
        P_Valid_To_Dt as validTo,
        P_Reg as forRegistration,
        P_Ren as forRenewal,
        P_Guest as direct
        FROM
        Product
    </sql>

    <select id="getDomainPriceByCode" remapResults="true" parameterClass="java.util.Map"
            resultMap="domain-price.domainPriceResult" cacheModel="domainPriceCache">
        <include refid="selectPrice" />
        WHERE P_Active = 'YES'
        AND
        (#forDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        BETWEEN P_Valid_From_Dt AND P_Valid_To_Dt)
        AND P_Code = #productCode,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
        ORDER BY P_Duration
    </select>

    <select id="getDomainPrice" remapResults="true" parameterClass="java.util.Map"
            resultMap="domain-price.domainPriceResult" cacheModel="domainPriceCache">
        <include refid="selectPrice" />
        WHERE P_Active = 'YES'
        AND P_Duration = #durationYears#
        AND (#forDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
            BETWEEN P_Valid_From_Dt AND P_Valid_To_Dt)
        <isNotNull prepend="and" property="forRegistration">
            P_Reg = #forRegistration,handler=pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler#
        </isNotNull>
        <isNotNull prepend="and" property="forRenewal">
            P_Ren = #forRenewal,handler=pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler#
        </isNotNull>
        AND P_Guest =
            #isDirect,handler=pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler#
        ORDER BY P_Duration
    </select>

    <select id="getDomainPriceList" parameterClass="java.util.Date"
        resultMap="domain-price.domainPriceResult" cacheModel="domainPriceCache">
        <include refid="selectPrice" />
        WHERE P_Active = 'YES'
        AND
        (#forDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        BETWEEN P_Valid_From_Dt AND P_Valid_To_Dt)
        ORDER BY P_Duration;
    </select>

    <insert id="create" parameterClass="pl.nask.crs.price.DomainPrice">
        INSERT INTO
        Product(
        P_Code,
        P_Description,
        P_Price,
        P_Duration,
        P_Valid_From_Dt,
        P_Valid_To_Dt,
        P_Reg,
        P_Ren,
        P_Guest)
        VALUES (
        #code,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #description,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #price#,
        #duration#,
        #validFrom,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #validTo,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #forRegistration,handler=pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler#,
        #forRenewal,handler=pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler#,
        #direct,handler=pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler#)
    </insert>

    <select id="getById" parameterClass="int"
        resultMap="domainPriceResult">
        <include refid="selectPrice" />
        WHERE Id = #id#
    </select>

    <select id="getAll" resultMap="domainPriceResult">
        <include refid="selectPrice" />
        ORDER BY P_Code ASC
    </select>

    <update id="update" parameterClass="pl.nask.crs.price.DomainPrice">
        UPDATE
        Product
        SET
        P_Description = #description,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        P_Price = #price#,
        P_Duration = #duration#,
        P_Valid_From_Dt = #validFrom,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        P_Valid_To_Dt = #validTo,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        P_Reg = #forRegistration,handler=pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler#,
        P_Ren = #forRenewal,handler=pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler#,
        P_Guest = #direct,handler=pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler#
        WHERE
        Id = #id#
    </update>

    <select id="findAll" parameterClass="java.util.Map"
        resultMap="domainPriceResult">
        <include refid="selectPrice" />
        <include refid="common.sortFrag" />
        <include refid="common.limitFrag" />
    </select>

    <select id="countFindAll" parameterClass="java.util.Map"
        resultClass="int">
        SELECT
        COUNT(*) as CNT
        FROM Product
    </select>
</sqlMap>
