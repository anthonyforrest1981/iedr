<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap
        PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
        "sql-map-2.dtd">

<sqlMap namespace="domain">

    <resultMap id="simpleDomainResultBase"
        class="pl.nask.crs.domains.dao.ibatis.objects.InternalDomain">
        <result property="holder" column="domainHolder"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="holderClass" resultMap="entities.entityClass" />
        <result property="holderCategory" resultMap="entities.entityCategory" />
        <result property="holderSubcategory" resultMap="entities.entitySubcategory" />
        <result property="resellerAccountId" column="resellerAccountId" />
        <result property="resellerAccountName" column="resellerAccountName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="resellerAccountBillingContact" column="resellerAccountBillingContact"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="registrationDate" column="registrationDate" />
        <result property="renewalDate" column="renewalDate" />
        <result property="changeDate" column="changeDate" />
        <result property="remark" column="remark"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="authCode" column="authCode"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="authCodeExpirationDate" column="authCodeExpirationDate" />
        <result property="authCodePortalCount" column="authCodePortalCount" />
        <result property="clikPaid" column="clikPaid"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler" />
        <result property="dsmState" resultMap="plain-domain.dsmState" />
        <result property="suspensionDate" column="suspensionDate" />
        <result property="deletionDate" column="deletionDate" />
        <result property="zonePublished" column="zonePublished" />
        <result property="transferDate" column="transferDate" />
        <result property="lockingDate" column="lockingDate" />
        <result property="lockingRenewalDate" column="lockingRenewalDate" />
    </resultMap>

    <resultMap id="simpleDomainResult"
        class="pl.nask.crs.domains.dao.ibatis.objects.InternalDomain"
        extends="simpleDomainResultBase">
        <result property="name" column="domainName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
    </resultMap>

    <resultMap id="simpleDomainResultWithLooseName"
        class="pl.nask.crs.domains.dao.ibatis.objects.InternalDomain"
        extends="simpleDomainResultBase">
        <result property="name" column="domainName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.LooseStringHandler" />
    </resultMap>

    <resultMap id="domainResult" extends="simpleDomainResult"
        class="pl.nask.crs.domains.dao.ibatis.objects.InternalDomain">
        <result property="nameservers" column="domainName"
            select="domain.getNameserversForDomain" />
        <result property="contacts" column="domainName"
            select="domain.getContactsForDomain" />
    </resultMap>

    <resultMap id="nameserverResult" class="pl.nask.crs.domains.nameservers.Nameserver">
        <result property="name" column="name"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="ipv4Address" column="ipv4Address"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="ipv6Address" column="ipv6Address"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
    </resultMap>

    <resultMap id="contactResult"
        class="pl.nask.crs.contacts.dao.ibatis.objects.InternalContact">
        <result property="nicHandle" column="nicHandle"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="name" column="name"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="email" column="email"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="companyName" column="companyName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="country" column="country"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="county" column="county"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="type" column="type"
            typeHandler="pl.nask.crs.contacts.dao.ibatis.handlers.ContactTypeHandler" />
    </resultMap>

    <resultMap id="domainCountForContactResult" class="pl.nask.crs.domains.DomainCountForContact">
        <result property="nicHandle" column="nicHandle"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="contactType" column="contactType"
            typeHandler="pl.nask.crs.contacts.dao.ibatis.handlers.ContactTypeHandler" />
        <result property="domainCount" column="domainCount" />
    </resultMap>

    <resultMap id="notificationResult" class="pl.nask.crs.domains.DomainNotification">
        <result property="domainName" column="domainName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="notificationPeriod" column="notificationPeriod" />
        <result property="expirationDate" column="expirationDate" />
    </resultMap>

    <resultMap id="nsReport" class="pl.nask.crs.domains.nameservers.NsReport">
        <result property="billingNH" column="billingNH" />
        <result property="domainName" column="domainName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="holderName" column="holderName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="registrationDate" column="registrationDate" />
        <result property="renewalDate" column="renewalDate" />
        <result property="dnsName" column="dnsName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="dnsOrder" column="dnsOrder" />
        <result property="dnsIpv4Address" column="dnsIpv4Address"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="dnsIpv6Address" column="dnsIpv6Address"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
    </resultMap>

    <sql id="domainSql">
        <include refid="plain-domain.basicDomainSql" />
        D.A_Number as resellerAccountId,
        A.A_Name as resellerAccountName,
        A.Billing_NH as resellerAccountBillingContact,
        D.D_Change_TS as changeDate,
        D.D_Remark as remark,
        D.D_ClikPaid as clikPaid,
        D.D_Transfer_TS as transferDate
        from
        Domain as D
        left join Account as A on (D.A_Number = A.A_Number)
        left join Class as CL ON (CL.id = D.Class_Id)
        left join Category as CT ON (CT.id = D.Category_Id)
        left join Subcategory as SCT ON (SCT.id = D.Subcategory_Id)
        join DSM_State as DSM on (D.DSM_State=DSM.State)
        left join Zone_Published as ZP on (D.D_Name = ZP.D_Name)
    </sql>

    <sql id="basicNicHandleJoin">
        <dynamic>
            <isNotNull property="criteria.nicHandle">
                left join
                Contact as C1
                on
                (D.D_Name = C1.D_Name)
            </isNotNull>
            <isNotNull property="criteria.secondContact">
                left join
                Contact as C11
                on
                (D.D_Name = C11.D_Name)
            </isNotNull>
        </dynamic>
    </sql>

    <sql id="billingNicHandleJoin">
        left join
        Contact as C2
        on (D.D_Name = C2.D_Name and C2.Type = 'Billing')
    </sql>

    <sql id="nicHandleJoin">
        <include refid="domain.basicNicHandleJoin" />
        <dynamic>
            <isNotNull property="criteria.billingNH">
                <include refid="domain.billingNicHandleJoin" />
            </isNotNull>
        </dynamic>
    </sql>

    <sql id="nicHandleFullJoin">
        <include refid="domain.basicNicHandleJoin" />
        <include refid="domain.billingNicHandleJoin" />
    </sql>

    <sql id="domainCriteria">
        <dynamic prepend="where">
            <include refid="plain-domain.basicDomainCriteria" />
            <isNotNull prepend="and" property="criteria.exactDomainHolder">
                D.D_Holder = #criteria.exactDomainHolder,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.accountId">
                D.A_Number = #criteria.accountId#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.nicHandle">
                C1.Contact_NH
                like
                #criteria.nicHandle,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringPrefixHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.secondContact">
                C11.Contact_NH
                like
                #criteria.secondContact,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringPrefixHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.billingNH">
                (C2.Contact_NH
                like
                #criteria.billingNH,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringPrefixHandler#)
            </isNotNull>
            <isNotEmpty prepend="and" property="criteria.contactType">
                C1.Type IN
                <iterate property="criteria.contactType" open="("
                    close=")" conjunction=",">
                    #criteria.contactType[],handler=pl.nask.crs.contacts.dao.ibatis.handlers.ContactTypeHandler#
                </iterate>
            </isNotEmpty>
            <isNotEmpty prepend="and" property="criteria.secondContactType">
                C11.Type IN
                <iterate property="criteria.secondContactType"
                    open="(" close=")" conjunction=",">
                    #criteria.secondContactType[],handler=pl.nask.crs.contacts.dao.ibatis.handlers.ContactTypeHandler#
                </iterate>
            </isNotEmpty>
            <isNotNull prepend="and" property="criteria.transferFrom">
                D_Transfer_TS >=
                #criteria.transferFrom,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.transferTo">
                D_Transfer_TS <![CDATA[<=]]>
                #criteria.transferTo,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
            </isNotNull>
            <isEqual prepend="and" property="criteria.type.description" compareValue="Direct">
                D.A_Number = 1
            </isEqual>
            <isEqual prepend="and" property="criteria.type.description" compareValue="Registrar">
                D.A_Number != 1
            </isEqual>
            <isNotNull prepend="and" property="criteria.renewalMonth">
                MONTH(D.D_Ren_Dt) = #criteria.renewalMonth#
            </isNotNull>
            <isEqual prepend="and" property="criteria.authCodeFromPortal"
                compareValue="true">
                D.D_Authc_Portal_Cnt > 0
            </isEqual>
        </dynamic>
    </sql>

    <select id="getDomainByName" parameterClass="java.lang.String"
        resultMap="domain.domainResult">
        <include refid="domainSql" />
        where D.D_Name = #name,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
    </select>

    <select id="getContactsForDomain" parameterClass="java.lang.String"
        resultMap="domain.contactResult">
        select
        C.Contact_NH as nicHandle,
        NH.NH_Name as name,
        NH.NH_Email as email,
        NH.Co_Name as companyName,
        Cntr.Name as country,
        Cnt.Name as county,
        C.Type as type
        from
        Contact as C
        left join NicHandle as NH on (C.Contact_NH = NH.Nic_Handle)
        left join Countries Cntr on Cntr.Id = NH.Country_Id
        left join Counties Cnt on Cnt.Id = NH.County_Id
        where
        C.D_Name = #name,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
    </select>

    <select id="getNameserversForDomain" parameterClass="java.lang.String"
        resultMap="domain.nameserverResult">
        select
        DNS_Name as name,
        DNS_IPv4_Addr as ipv4Address,
        DNS_IPv6_Addr as ipv6Address
        from
        DNS
        where
        D_Name = #name,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
        order by
        DNS_Order
    </select>

    <select id="findDomain" parameterClass="java.util.Map"
        resultMap="domain.simpleDomainResult">
        <include refid="domainSql" />
        <include refid="domain.nicHandleJoin" />
        <include refid="domain.domainCriteria" />
        <dynamic>
            <isNotNull property="criteria.nicHandle">
                group by D.D_Name
            </isNotNull>
        </dynamic>
        <include refid="common.sortFrag" />
        <include refid="common.limitFrag" />
    </select>

    <select id="findFullDomain" parameterClass="java.util.Map"
        resultMap="domain.domainResult">
        <include refid="domainSql" />
        <include refid="domain.nicHandleFullJoin" />
        <include refid="domain.domainCriteria" />
        group by D.D_Name
        <include refid="common.sortFrag" />
        <include refid="common.limitFrag" />
    </select>

    <select id="countFindDomain" parameterClass="java.util.Map"
        resultClass="int">
        select
        <!-- count(distinct(D.D_Name)) is needed, if the search criteria
            contain contact nic handle (nic handle join is performed) in every other
            case count(D.DOMAIN) is enough -->
        <dynamic>
            <isNotNull property="criteria.nicHandle">
                count(distinct(D.D_Name)) as CNT
            </isNotNull>
            <isNull property="criteria.nicHandle">
                count(D.D_Name) as CNT
            </isNull>
        </dynamic>
        from
        Domain as D
        left join Class as CL ON (CL.id = D.Class_Id)
        left join Category as CT ON (CT.id = D.Category_Id)
        left join Subcategory as SCT ON (SCT.id = D.Subcategory_Id)
        join DSM_State as DSM on (D.DSM_State = DSM.State)
        <include refid="domain.nicHandleJoin" />
        <include refid="domain.domainCriteria" />
    </select>

    <select id="countFullFindDomain" parameterClass="java.util.Map"
        resultClass="int">
        select
        count(distinct(D.D_Name)) as CNT
        from
        Domain as D
        left join Class as CL ON (CL.id = D.Class_Id)
        left join Category as CT ON (CT.id = D.Category_Id)
        left join Subcategory as SCT ON (SCT.id = D.Subcategory_Id)
        join DSM_State as DSM on (D.DSM_State = DSM.State)
        <include refid="domain.nicHandleFullJoin" />
        <include refid="domain.domainCriteria" />
    </select>

    <select id="getPreviousHolder" parameterClass="pl.nask.crs.domains.search.DomainSearchCriteria"
        resultMap="common.looselyNormalizedString">
        select
        D.D_Holder as holder
        from
        DomainHist as D
        where
        D.D_Name = #domainName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
        <dynamic>
            <isNotNull prepend="and" property="domainHolder">
                D.D_Holder !=
                #domainHolder,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
            </isNotNull>
        </dynamic>
        order by D.D_Change_TS desc limit 1   <!--todo: nie wiem czy tu nie powinna
            byc inna data uzyta -->
    </select>

    <update id="updateUsingHistory" parameterClass="long">
        update
        Domain D
        left join DomainHist DH on DH.D_Name = D.D_Name
        left join AccountHist AH on AH.Chng_ID = DH.Account_Chng_ID
        set
        D.D_Name = DH.D_Name,
        D.D_Holder = DH.D_Holder,
        D.Class_Id = DH.Class_Id,
        D.Category_Id = DH.Category_Id,
        D.Subcategory_Id = DH.Subcategory_Id,
        D.A_Number =  AH.A_Number,
        D.D_Reg_TS = DH.D_Reg_TS,
        D.D_Ren_Dt = DH.D_Ren_Dt,
        D.D_Change_TS = DH.D_Change_TS,
        D.D_Remark = DH.D_Remark,
        D.D_ClikPaid = DH.D_ClikPaid,
        D.DSM_State = DH.DSM_State,
        D.D_Susp_Dt = DH.D_Susp_Dt,
        D.D_Del_Dt = DH.D_Del_Dt,
        D.D_Transfer_TS = DH.D_Transfer_TS,
        D.D_Authcode = DH.D_Authcode,
        D.D_Authc_Exp_Dt = DH.D_Authc_Exp_Dt,
        D.D_Authc_Portal_Cnt =  DH.D_Authc_Portal_Cnt,
        D.D_Locking_TS = DH.D_Locking_TS,
        D.D_LockingRenewal_Dt = DH.D_LockingRenewal_Dt,
        D.Chng_ID = DH.Chng_ID
        where
        DH.Chng_ID = #changeId#
    </update>

    <insert id="createNameserversUsingHistory" parameterClass="long">
        insert into
        DNS(
        D_Name,
        DNS_Name,
        DNS_IPv4_Addr,
        DNS_IPv6_Addr,
        DNS_Order
        ) select
        D_Name,
        DNS_Name,
        DNS_IPv4_Addr,
        DNS_IPv6_Addr,
        DNS_Order
        from DNSHist
        where Chng_ID = #changeId#
    </insert>

    <delete id="deleteNameserversByChangeId" parameterClass="long">
        delete DNS.* from DNS
        left join DNSHist on DNSHist.D_Name = DNS.D_Name
        where DNSHist.Chng_ID = #changeId#
    </delete>

    <insert id="createContactsUsingHistory" parameterClass="long">
        insert into Contact (D_Name, Contact_NH, Type)
        select CH.D_Name, NHH.Nic_Handle, CH.Type
        from ContactHist CH
        left join NicHandleHist NHH on NHH.Chng_ID = CH.Nic_Handle_Chng_ID
        where CH.Chng_ID = #changeId#
    </insert>

    <delete id="deleteContactsByChangeId" parameterClass="long">
        delete C.* from Contact C
        left join DomainHist DH on DH.D_Name = C.D_Name
        where DH.Chng_ID = #changeId#
    </delete>

    <select id="getLockedDomainByName" parameterClass="java.lang.String"
        resultMap="common.normalizedString">
        SELECT
        D_Name as domainName
        FROM
        Domain
        WHERE
        D_Name = #name,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
        FOR UPDATE
    </select>

    <insert id="createDomain" parameterClass="pl.nask.crs.domains.dao.ibatis.objects.InternalDomain">
        insert into
        Domain (
        D_Name,
        D_Holder,
        Class_Id,
        Category_Id,
        Subcategory_Id,
        A_Number,
        D_Reg_TS,
        D_Ren_Dt,
        D_Change_TS,
        D_Remark,
        D_ClikPaid,
        DSM_State,
        D_Susp_Dt,
        D_Del_Dt,
        D_Transfer_TS,
        D_Authcode,
        D_Authc_Exp_Dt,
        D_Authc_Portal_Cnt,
        D_Locking_TS,
        D_LockingRenewal_Dt
        ) values (
        #name,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #holder,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #holderClass.id#,
        #holderCategory.id#,
        #holderSubcategory.id#,
        #resellerAccountId#,
        #registrationDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #renewalDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #changeDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #remark,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #clikPaid,handler=pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler#,
        #dsmState.id#,
        #suspensionDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #deletionDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #transferDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #authCode,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #authCodeExpirationDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #authCodePortalCount#,
        #lockingDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #lockingRenewalDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
        )
    </insert>

    <select id="findDomainNames" parameterClass="java.util.Map"
        resultMap="common.normalizedString">
        SELECT
        D.D_Name as domainName
        FROM
        Domain as D
        left join Account as A on (D.A_Number = A.A_Number)
        left join Class as CL ON (CL.id = D.Class_Id)
        left join Category as CT ON (CT.id = D.Category_Id)
        left join Subcategory as SCT ON (SCT.id = D.Subcategory_Id)
        join DSM_State as DSM on (D.DSM_State = DSM.State)
        <include refid="domain.nicHandleJoin" />
        <include refid="domain.domainCriteria" />
        <include refid="common.limitFrag" />
    </select>

    <insert id="domainPublished" parameterClass="java.lang.String">
        insert ignore
        into Zone_Published(D_Name) values
        (#domain,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#)
    </insert>

    <delete id="domainUnpublished" parameterClass="java.lang.String">
        delete from
        Zone_Published where D_Name = #domain,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
    </delete>

    <update id="zoneCommit">
        update Zone_Published set Committed='Y' where
        Committed is null;
    </update>

    <select id="getDsmStates" resultClass="int">
        SELECT State FROM
        DSM_State
    </select>

    <delete id="deleteDomain" parameterClass="java.lang.String">
        DELETE FROM Domain
        WHERE D_Name = #domainName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
    </delete>

    <delete id="deleteAssociatedDNS" parameterClass="java.lang.String">
        DELETE FROM
        DNS
        WHERE D_Name = #domainName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
    </delete>

    <delete id="deleteAssociatedContact" parameterClass="java.lang.String">
        DELETE
        FROM Contact
        WHERE D_Name = #domainName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
    </delete>

    <select id="getNotification" resultMap="notificationResult"
        parameterClass="java.util.Map">
        SELECT
        D_Name as domainName,
        Period as notificationPeriod,
        Expiry_Dt as expirationDate
        FROM
        Domain_Notifications
        WHERE
        D_Name = #domainName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
        AND Period = #notificationPeriod#
        AND Expiry_Dt >= CURDATE()
    </select>

    <select id="getAllNotifications" resultMap="notificationResult">
        SELECT
        D_Name as domainName,
        Period as notificationPeriod,
        Expiry_Dt as expirationDate
        FROM Domain_Notifications
    </select>

    <insert id="createNotification" parameterClass="pl.nask.crs.domains.DomainNotification">
        INSERT INTO
        Domain_Notifications(D_Name, Period, Expiry_Dt)
        VALUES
        (#domainName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #notificationPeriod#,
        #expirationDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#)
    </insert>

    <select id="exists" parameterClass="java.lang.String"
        resultMap="common.normalizedString">
        select D_Name as domainName
        from Domain
        where
        D_Name=#domainName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
    </select>

    <sql id="nsReportCriteria">
        <dynamic>
            <isNotNull prepend="and" property="criteria.domainName">
                Domain.D_Name
                like
                #criteria.domainName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringPrefixHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.holderName">
                D_Holder like
                #criteria.holderName,handler=pl.nask.crs.commons.dao.ibatis.handlers.SubstringHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.registrationFrom">
                D_Reg_TS >=
                #criteria.registrationFrom,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.registrationTo">
                D_Reg_TS <![CDATA[<=]]>
                #criteria.registrationTo,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.renewalFrom">
                D_Ren_Dt >=
                #criteria.renewalFrom,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.renewalTo">
                D_Ren_Dt <![CDATA[<=]]>
                #criteria.renewalTo,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.dnsName">
                DNS_Name like
                #criteria.dnsName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringPrefixHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.dnsOrder">
                DNS_Order = #criteria.dnsOrder#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.dnsIpv4Address">
                DNS_IPv4_Addr
                like
                #criteria.dnsIpv4Address,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringPrefixHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.dnsIpv6Address">
                DNS_IPv6_Addr
                like
                #criteria.dnsIpv6Address,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringPrefixHandler#
            </isNotNull>
        </dynamic>
    </sql>

    <select id="getNsReports" resultMap="nsReport">
        SELECT distinct
        Contact_NH as billingNH,
        Domain.D_Name as domainName,
        D_Holder as holderName,
        D_Reg_TS as registrationDate,
        D_Ren_Dt as renewalDate,
        DNS_Name as dnsName,
        DNS_Order as dnsOrder,
        DNS_IPv4_Addr as dnsIpv4Address,
        DNS_IPv6_Addr as dnsIpv6Address
        FROM DNS
        LEFT JOIN Domain ON (Domain.D_Name = DNS.D_Name)
        LEFT JOIN Contact C ON (Domain.D_Name = C.D_Name)
        WHERE
        (C.Type = 'Billing' or C.Type = 'Admin' or C.Type = 'Tech')
        AND
        C.Contact_NH = #billingNH,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
        <include refid="nsReportCriteria" />
        <include refid="common.sortFrag" />
        <include refid="common.limitFrag" />
    </select>

    <select id="getNsReportsCount" resultClass="int">
        SELECT
        COUNT(distinct Domain.D_Name, DNS_Order)
        FROM DNS
        LEFT JOIN Domain ON (Domain.D_Name = DNS.D_Name)
        LEFT JOIN Contact C ON (Domain.D_Name = C.D_Name)
        WHERE
        (C.Type = 'Billing' or C.Type = 'Admin' or C.Type = 'Tech')
        AND
        C.Contact_NH = #billingNH,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
        <include refid="nsReportCriteria" />
    </select>

    <insert id="createTransferHistRecord">
        INSERT INTO
        TransfersHist(
        D_Name,
        Transfer_TS,
        Old_Nic_Handle,
        New_Nic_Handle,
        Transferred_Domain_Chng_ID)
        SELECT
        #domainName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #transferDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #oldBillC,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #newBillC,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        Chng_ID
        FROM Domain
        WHERE
        D_Name = #domainName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
    </insert>

    <select id="getDomainCountForContact" parameterClass="java.util.Map"
        resultMap="domain.domainCountForContactResult">
        SELECT
        COUNT(*) as domainCount,
        C.Contact_NH as nicHandle,
        C.Type as contactType
        FROM Contact C
        <dynamic prepend="where">
            <isNotNull prepend="and" property="criteria.nicHandle">
                C.Contact_NH
                like
                #criteria.nicHandle,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
            </isNotNull>
            <isNotEmpty prepend="and" property="criteria.contactType">
                C.Type IN
                <iterate property="criteria.contactType" open="("
                    close=")" conjunction=",">
                    #criteria.contactType[],handler=pl.nask.crs.contacts.dao.ibatis.handlers.ContactTypeHandler#
                </iterate>
            </isNotEmpty>
            <isNotEmpty prepend="and" property="criteria.nrpStatuses">
                (SELECT DSM.NRP_Status FROM Domain D join DSM_State DSM
                on (D.DSM_State = DSM.State) WHERE D.D_Name = C.D_Name)
                IN
                <iterate property="criteria.nrpStatuses" open="("
                    close=")" conjunction=",">
                    #criteria.nrpStatuses[],handler=pl.nask.crs.domains.dao.ibatis.handlers.NrpStatusHandler#
                </iterate>
            </isNotEmpty>
        </dynamic>
        GROUP BY Contact_NH, Type
        ORDER BY Contact_NH, Type;
    </select>
</sqlMap>
