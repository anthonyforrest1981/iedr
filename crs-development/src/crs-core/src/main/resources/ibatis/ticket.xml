<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap
        PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
        "sql-map-2.dtd">

<sqlMap namespace="ticket">
    <resultMap id="ticketResult"
        class="pl.nask.crs.ticket.dao.ibatis.objects.InternalTicket">
        <result property="dataSetType" nullValue="simple" column="_resultType_" />
        <result property="id" column="ticketId" />

        <result property="type" column="type"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.DomainOperationTypeHandler" />

        <result property="domainName" column="domainName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="domainNameFailureReason" column="domainNameFR"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler"/>

        <result property="domainHolder" column="domainHolder"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="domainHolderFailureReason" column="domainHolderFR"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler"/>

        <result property="domainHolderClass" resultMap="entities.entityClass" />
        <result property="domainHolderClassFailureReason" column="domainHolderClassFR"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler"/>

        <result property="domainHolderCategory" resultMap="entities.entityCategory" />
        <result property="domainHolderCategoryFailureReason" column="domainHolderCatFR"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler"/>

        <result property="domainHolderSubcategory" resultMap="entities.entitySubcategory" />

        <result property="resellerAccountId" column="resellerAccountId" />
        <result property="resellerAccountName" column="resellerAccountName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="resellerAccountBillingContact" column="resellerAccountBillingContact"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="resellerAccountFailureReason" column="resellerAccountFR"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler"/>
        <result property="resellerAccountAgreementSigned" column="agreementSigned"
            javaType="boolean" nullValue="false" />
        <result property="resellerAccountTicketEdit" column="ticketEdit"
            javaType="boolean" nullValue="false" />
        <result property="adminContact1NicHandle" column="adminContact1NH"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="adminContact1Name" column="adminContact1Name"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="adminContact1Email" column="adminContact1Email"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="adminContact1CompanyName" column="adminContact1CompanyName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="adminContact1Country" column="adminContact1Country"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="adminContact1FailureReason" column="adminContact1FR"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler"/>

        <result property="adminContact2NicHandle" column="adminContact2NH"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="adminContact2Name" column="adminContact2Name"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="adminContact2Email" column="adminContact2Email"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="adminContact2CompanyName" column="adminContact2CompanyName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="adminContact2Country" column="adminContact2Country"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="adminContact2FailureReason" column="adminContact2FR"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler"/>

        <result property="techContactNicHandle" column="techContactNH"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="techContactName" column="techContactName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="techContactEmail" column="techContactEmail"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="techContactCompanyName" column="techContactCompanyName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="techContactCountry" column="techContactCountry"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="techContactFailureReason" column="techContactFR"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler"/>

        <result property="billingContactNicHandle" column="billingContactNH"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="billingContactName" column="billingContactName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="billingContactEmail" column="billingContactEmail"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="billingContactCompanyName" column="billingContactCompanyName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="billingContactCountry" column="billingContactCountry"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="billingContactFailureReason" column="billingContactFR"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler"/>

        <result property="requestersRemark" column="requestersRemark"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="hostmastersRemark" column="hostmastersRemark"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />

        <result property="adminStatus" column="adminStatus"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.AdminStatusHandler" />
        <result property="adminStatusChangeDate" column="adminStatusChangeDate" />

        <result property="techStatus" column="techStatus"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.TechStatusHandler"/>
        <result property="techStatusChangeDate" column="techStatusChangeDate" />

        <result property="financialStatus" column="financialStatus"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.FinancialStatusHandler"/>
        <result property="financialStatusChangeDate" column="financialStatusChangeDate" />

        <result property="customerStatus" column="customerStatus"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.CustomerStatusHandler"/>
        <result property="customerStatusChangeDate" column="customerStatusChangeDate" />

        <result property="checkedOut" column="checkedOut"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler" />
        <result property="checkedOutToNicHandle" column="checkedOutToNH"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="checkedOutToName" column="checkedOutToName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />

        <result property="creatorNicHandle" column="creatorNH"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="creatorName" column="creatorName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="creatorEmail" column="creatorEmail"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="creatorCompanyName" column="creatorCompanyName"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="creatorCountry" column="creatorCountry"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="creationDate" column="creationDate" />
        <result property="changeDate" column="changeDate" />
        <result property="renewalDate" column="renewalDate" />
        <result property="clikPaid" column="clikPaid"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler" />
        <result property="domainPeriod" column="domainPeriod" />
        <result property="charityCode" column="charityCode"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="autorenewMode" column="autorenewMode"
                typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler" />
        <result property="documentsCount" column="docsCNT" />
    </resultMap>

    <resultMap extends="ticket.ticketResult" id="extendedTicketResult"
        class="pl.nask.crs.ticket.dao.ibatis.objects.InternalTicket">
        <result property="dataSetType" nullValue="full" column="_resultType_" />
        <result property="nameservers" column="ticketId"
            select="ticket.getNameserversForTicket" />
    </resultMap>

    <resultMap id="ticketNameserver"
        class="pl.nask.crs.ticket.dao.ibatis.objects.InternalTicketNameserver">
        <result property="name" column="TN_Name"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.StringHandler" />
        <result property="nameFailureReason" column="TN_Name_Fail_Cd"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler"/>
        <result property="ipv4" column="TN_IPv4"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.EmptyStringAsNullTypeHandler" />
        <result property="ipv4FailureReason" column="TN_IPv4_Fail_Cd"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.IpFailureReasonHandler"/>
        <result property="ipv6" column="TN_IPv6"
            typeHandler="pl.nask.crs.commons.dao.ibatis.handlers.EmptyStringAsNullTypeHandler" />
        <result property="ipv6FailureReason" column="TN_IPv6_Fail_Cd"
            typeHandler="pl.nask.crs.ticket.dao.ibatis.handlers.IpFailureReasonHandler"/>
    </resultMap>

    <resultMap id="ticketNotification" class="pl.nask.crs.ticket.TicketNotification">
        <result property="ticketId" column="ticketId" />
        <result property="notificationPeriod" column="notificationPeriod" />
    </resultMap>

    <sql id="select">
        SELECT
        null as _resultType_,
        T.T_Number as ticketId,
        T.T_Type as type,
        T.D_Name as domainName,
        T.DN_Fail_Cd as domainNameFR,
        T.D_Holder as domainHolder,
        T.DH_Fail_Cd as domainHolderFR,
        T.A_Number as resellerAccountId,
        A.A_Name as resellerAccountName,
        A.Billing_NH as resellerAccountBillingContact,
        A.Agreement_Signed as agreementSigned,
        A.Ticket_Edit as ticketEdit,
        T.AC_Fail_Cd as resellerAccountFR,
        T.Class_Id as classId,
        CL.name as className,
        T.Class_Id_Fail_Cd as domainHolderClassFR,
        T.Category_Id as categoryId,
        CT.name as categoryName,
        T.Category_Id_Fail_Cd as domainHolderCatFR,
        T.Subcategory_Id as subcategoryId,
        SCT.name as subcategoryName,
        T.Admin_NH1 as adminContact1NH,
        AC1.NH_Name as adminContact1Name,
        AC1.NH_Email as adminContact1Email,
        AC1.Co_Name as adminContact1CompanyName,
        AC1_Cntr.Name as adminContact1Country,
        T.ANH1_Fail_Cd as adminContact1FR,
        T.Admin_NH2 as adminContact2NH,
        AC2.NH_Name as adminContact2Name,
        AC2.NH_Email as adminContact2Email,
        AC2.Co_Name as adminContact2CompanyName,
        AC2_Cntr.Name as adminContact2Country,
        T.ANH2_Fail_Cd as adminContact2FR,
        T.Tech_NH as techContactNH,
        TC.NH_Name as techContactName,
        TC.NH_Email as techContactEmail,
        TC.Co_Name as techContactCompanyName,
        TC_Cntr.Name as techContactCountry,
        T.TNH_Fail_Cd as techContactFR,
        T.Bill_NH as billingContactNH,
        BC.NH_Name as billingContactName,
        BC.NH_Email as billingContactEmail,
        BC.Co_Name as billingContactCompanyName,
        BC_Cntr.Name as billingContactCountry,
        T.BNH_Fail_Cd as billingContactFR,
        T.Creator_NH as creatorNH,
        Creator.NH_Name as creatorName,
        Creator.NH_Email as creatorEmail,
        Creator.Co_Name as creatorCompanyName,
        C_Cntr.Name as creatorCountry,
        T.Admin_Status as adminStatus,
        T.Ad_Status_TS as adminStatusChangeDate,
        T.Tech_Status as techStatus,
        T.T_Status_TS as techStatusChangeDate,
        T.Financial_Status as financialStatus,
        T.F_Status_TS as financialStatusChangeDate,
        T.Customer_Status as customerStatus,
        T.C_Status_TS as customerStatusChangeDate,
        T.CheckedOut as checkedOut,
        T.CheckedOutTo as checkedOutToNH,
        CheckedOutTo.NH_Name as checkedOutToName,
        T.T_Ren_Dt as renewalDate,
        T.T_Change_TS as changeDate,
        T.T_Remark as requestersRemark,
        T.H_Remark as hostmastersRemark,
        T.T_Created_TS as creationDate,
        T.T_ClikPaid as clikPaid,
        T.Period as domainPeriod,
        T.CharityCode as charityCode,
        T.AutorenewMode as autorenewMode,
        count(IDD.DOC_ID) as docsCNT
        FROM
        Ticket as T
        LEFT JOIN Account as A ON (T.A_Number = A.A_Number)
        LEFT JOIN Class as CL ON (CL.id = T.Class_Id)
        LEFT JOIN Category as CT ON (CT.id = T.Category_Id)
        LEFT JOIN Subcategory as SCT ON (SCT.id = T.Subcategory_Id)
        LEFT JOIN NicHandle as AC1 ON (T.Admin_NH1 = AC1.Nic_Handle)
        LEFT JOIN NicHandle as AC2 ON (T.Admin_NH2 = AC2.Nic_Handle)
        LEFT JOIN NicHandle as TC ON (T.Tech_NH = TC.Nic_Handle)
        LEFT JOIN NicHandle as BC ON (T.Bill_NH = BC.Nic_Handle)
        LEFT JOIN NicHandle as Creator ON (T.Creator_NH = Creator.Nic_Handle)
        LEFT JOIN Countries as AC1_Cntr ON (AC1_Cntr.Id = AC1.Country_Id)
        LEFT JOIN Countries as AC2_Cntr ON (AC2_Cntr.Id = AC2.Country_Id)
        LEFT JOIN Countries as TC_Cntr ON (TC_Cntr.Id = TC.Country_Id)
        LEFT JOIN Countries as BC_Cntr ON (BC_Cntr.Id = BC.Country_Id)
        LEFT JOIN Countries as C_Cntr ON (C_Cntr.Id = Creator.Country_Id)
        LEFT JOIN NicHandle as CheckedOutTo ON (T.CheckedOutTo = CheckedOutTo.Nic_Handle)
        LEFT JOIN (
            INCOMING_DOC_DOMAINS as IDD
            INNER JOIN INCOMING_DOC as IND ON IDD.DOC_ID = IND.DOC_ID
                AND DATEDIFF(CURDATE(), IND.Create_TS) <![CDATA[<=]]> 60
            )
            ON (T.D_Name = IDD.DOMAIN_NAME)
    </sql>

    <!-- group by is needed because count(T_Number) is used -->
    <select id="geTicketById" parameterClass="long"
        resultMap="extendedTicketResult">
        <include refid="ticket.select" />
        where
        T_Number = #id#
        group by T_Number
    </select>

    <select id="getLockedTicketById" parameterClass="java.lang.Long"
        resultClass="java.lang.String">
        SELECT
        T_Number
        FROM
        Ticket
        WHERE
        T_Number = #id#
        FOR
        UPDATE
    </select>

    <sql id="ticketCriteria">
        <dynamic prepend="WHERE">
            <isNotNull prepend="and" property="criteria.ticketId">
                T.T_Number = #criteria.ticketId#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.domainHolder">
                T.D_Holder like
                #criteria.domainHolder,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringPrefixHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.exactDomainHolder">
                T.D_Holder =
                #criteria.exactDomainHolder,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.adminStatus">
                T.Admin_Status = #criteria.adminStatus,handler=pl.nask.crs.ticket.dao.ibatis.handlers.AdminStatusHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.techStatus">
                T.Tech_Status = #criteria.techStatus,handler=pl.nask.crs.ticket.dao.ibatis.handlers.TechStatusHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.customerStatus">
                T.Customer_Status = #criteria.customerStatus,handler=pl.nask.crs.ticket.dao.ibatis.handlers.CustomerStatusHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.nicHandle">
                T.CheckedOutTo = #criteria.nicHandle,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.domainName">
                T.D_Name like
                #criteria.domainName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringPrefixHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.exactDomainName">
                T.D_Name = #criteria.exactDomainName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.from">
                T.T_Created_TS
                >=
                #criteria.from,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.to">
                T.T_Created_TS <![CDATA[<=]]>
                #criteria.to,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.accountId">
                T.A_Number = #criteria.accountId#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.classId">
                T.Class_Id = #criteria.classId#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.categoryId">
                T.Category_Id = #criteria.categoryId#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.categoryName">
                CT.name =
                #criteria.categoryName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.className">
                CL.name =
                #criteria.className,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.billNicHandle">
                T.Bill_NH = #criteria.billNicHandle,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
            </isNotNull>
            <isNotEmpty prepend="and" property="criteria.type">
                T.T_Type IN
                <iterate property="criteria.type" open="("
                    close=")" conjunction=",">
                    #criteria.type[],handler=pl.nask.crs.ticket.dao.ibatis.handlers.DomainOperationTypeHandler#
                </iterate>
            </isNotEmpty>
            <isNotNull prepend="and" property="criteria.financialStatus">
                T.Financial_Status = #criteria.financialStatus,handler=pl.nask.crs.ticket.dao.ibatis.handlers.FinancialStatusHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.creatorNh">
                T.Creator_NH = #criteria.creatorNh,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
            </isNotNull>
            <isNotNull prepend="and" property="criteria.anyContactNH">
                T.Admin_NH1 = #criteria.anyContactNH,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
                OR T.Admin_NH2 = #criteria.anyContactNH,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
                OR T.Bill_NH = #criteria.anyContactNH,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
                OR T.Tech_NH = #criteria.anyContactNH,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#
            </isNotNull>
        </dynamic>
    </sql>

    <sql id="dynamicJoin">
        <dynamic>
            <isNotNull property="criteria.className">
                LEFT JOIN Class as CL ON (CL.id = T.Class_Id)
            </isNotNull>
            <isNotNull property="criteria.categoryName">
                LEFT JOIN Category as CT ON (CT.id = T.Category_Id)
            </isNotNull>
        </dynamic>
    </sql>

    <select id="findTicket" parameterClass="java.util.Map"
        resultMap="ticketResult">
        <include refid="ticket.select" />
        <include refid="ticketCriteria" />
        group by T_Number
        <include refid="common.sortFrag" />
        <include refid="common.limitFrag" />
    </select>

    <select id="countTotalSearchResult" parameterClass="java.util.Map"
        resultClass="int">
        select count(T.T_Number)
        from
        Ticket as T
        left join Account as A on (T.A_Number = A.A_Number)
        <include refid="dynamicJoin" />
        <include refid="ticketCriteria" />
    </select>

    <update id="updateUsingHistory" parameterClass="long">
        update
        Ticket T
        left join TicketHist TH on TH.T_Number = T.T_Number
        left join AccountHist AH on AH.Chng_ID = TH.Account_Chng_ID
        left join NicHandleHist ANHH1 on ANHH1.Chng_ID = TH.Admin_NH1_Chng_ID
        left join NicHandleHist ANHH2 on ANHH2.Chng_ID = TH.Admin_NH2_Chng_ID
        left join NicHandleHist TNHH on TNHH.Chng_ID = TH.Tech_NH_Chng_ID
        left join NicHandleHist BNHH on BNHH.Chng_ID = TH.Bill_NH_Chng_ID
        left join NicHandleHist CNHH on CNHH.Chng_ID = TH.Creator_NH_Chng_ID
        left join NicHandleHist CotNHH on CotNHH.Chng_ID = TH.CheckedOutTo_NH_Chng_ID
        set
        T.T_Type = TH.T_Type,
        T.D_Name = TH.D_Name,
        T.DN_Fail_Cd = TH.DN_Fail_Cd,
        T.D_Holder = TH.D_Holder,
        T.DH_Fail_Cd = TH.DH_Fail_Cd,
        T.A_Number = AH.A_Number,
        T.AC_Fail_Cd = TH.AC_Fail_Cd,
        T.Class_Id = TH.Class_Id,
        T.Category_Id = TH.Category_Id,
        T.Subcategory_Id = TH.Subcategory_Id,
        T.T_Remark = TH.T_Remark,
        T.Admin_NH1 = ANHH1.Nic_Handle,
        T.ANH1_Fail_Cd = TH.ANH1_Fail_Cd,
        T.Admin_NH2 = ANHH2.Nic_Handle,
        T.ANH2_Fail_Cd = TH.ANH2_Fail_Cd,
        T.Tech_NH = TNHH.Nic_Handle,
        T.TNH_Fail_Cd = TH.TNH_Fail_Cd,
        T.Bill_NH = BNHH.Nic_Handle,
        T.BNH_Fail_Cd = TH.BNH_Fail_Cd,
        T.Creator_NH = CNHH.Nic_Handle,
        T.Admin_Status = TH.Admin_Status,
        T.Ad_Status_TS = TH.Ad_Status_TS,
        T.Tech_Status = TH.Tech_Status,
        T.T_Status_TS = TH.T_Status_TS,
        T.CheckedOut = TH.CheckedOut,
        T.CheckedOutTo = CotNHH.Nic_Handle,
        T.T_Ren_Dt = TH.T_Ren_Dt,
        T.T_Change_TS = TH.T_Change_TS,
        T.H_Remark = TH.H_Remark,
        T.Class_Id_Fail_Cd = TH.Class_Id_Fail_Cd,
        T.Category_Id_Fail_Cd = TH.Category_Id_Fail_Cd,
        T.T_Created_TS = TH.T_Created_TS,
        T.T_ClikPaid = TH.T_ClikPaid,
        T.Period = TH.Period,
        T.CharityCode = TH.CharityCode,
        T.AutorenewMode = TH.AutorenewMode,
        T.Financial_Status = TH.Financial_Status,
        T.F_Status_TS = TH.F_Status_TS,
        T.Customer_Status = TH.Customer_Status,
        T.C_Status_TS = TH.C_Status_TS,
        T.Chng_ID = TH.Chng_ID
        where
        TH.Chng_ID = #changeId#
    </update>

    <select id="findDomainNames" parameterClass="java.util.Map"
        resultClass="string">
        select T.D_Name
        from Ticket T
        <include refid="dynamicJoin" />
        <include refid="ticketCriteria" />
        <include refid="common.limitFrag" />
    </select>

    <insert id="insertTicket" parameterClass="java.util.Map">
        INSERT INTO Ticket (
        T_Number,
        T_Type,
        D_Name,
        DN_Fail_Cd,
        D_Holder,
        DH_Fail_Cd,
        A_Number,
        AC_Fail_Cd,
        Class_Id,
        Category_Id,
        Subcategory_Id,
        T_Remark,
        Admin_NH1,
        ANH1_Fail_Cd,
        Admin_NH2,
        ANH2_Fail_Cd,
        Tech_NH,
        TNH_Fail_Cd,
        Bill_NH,
        BNH_Fail_Cd,
        Creator_NH,
        Admin_Status,
        Ad_Status_TS,
        Tech_Status,
        T_Status_TS,
        Financial_Status,
        F_Status_TS,
        Customer_Status,
        C_Status_TS,
        CheckedOut,
        CheckedOutTo,
        T_Ren_Dt,
        T_Change_TS,
        H_Remark,
        Class_Id_Fail_Cd,
        Category_Id_Fail_Cd,
        T_Created_TS,
        T_ClikPaid,
        Period,
        CharityCode,
        AutorenewMode
        ) VALUES (
        #internalTicket.id#,
        #internalTicket.type,handler=pl.nask.crs.ticket.dao.ibatis.handlers.DomainOperationTypeHandler#,
        #internalTicket.domainName,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #internalTicket.domainNameFailureReason,handler=pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler#,
        #internalTicket.domainHolder,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #internalTicket.domainHolderFailureReason,handler=pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler#,
        #internalTicket.resellerAccountId#,
        #internalTicket.resellerAccountFailureReason,handler=pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler#,
        #internalTicket.domainHolderClass.id#,
        #internalTicket.domainHolderCategory.id#,
        #internalTicket.domainHolderSubcategory.id#,
        #internalTicket.requestersRemark,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #internalTicket.adminContact1NicHandle,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #internalTicket.adminContact1FailureReason,handler=pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler#,
        #internalTicket.adminContact2NicHandle,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #internalTicket.adminContact2FailureReason,handler=pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler#,
        #internalTicket.techContactNicHandle,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #internalTicket.techContactFailureReason,handler=pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler#,
        #internalTicket.billingContactNicHandle,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #internalTicket.billingContactFailureReason,handler=pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler#,
        #internalTicket.creatorNicHandle,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #internalTicket.adminStatus,handler=pl.nask.crs.ticket.dao.ibatis.handlers.AdminStatusHandler#,
        #internalTicket.adminStatusChangeDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #internalTicket.techStatus,handler=pl.nask.crs.ticket.dao.ibatis.handlers.TechStatusHandler#,
        #internalTicket.techStatusChangeDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #internalTicket.financialStatus,handler=pl.nask.crs.ticket.dao.ibatis.handlers.FinancialStatusHandler#,
        #internalTicket.financialStatusChangeDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #internalTicket.customerStatus,handler=pl.nask.crs.ticket.dao.ibatis.handlers.CustomerStatusHandler#,
        #internalTicket.customerStatusChangeDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #internalTicket.checkedOut,handler=pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler#,
        #internalTicket.checkedOutToNicHandle,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #internalTicket.renewalDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #internalTicket.changeDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #internalTicket.hostmastersRemark,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #internalTicket.domainHolderClassFailureReason,handler=pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler#,
        #internalTicket.domainHolderCategoryFailureReason,handler=pl.nask.crs.ticket.dao.ibatis.handlers.FailureReasonHandler#,
        #internalTicket.creationDate,handler=pl.nask.crs.commons.dao.ibatis.handlers.TruncatedDateHandler#,
        #internalTicket.clikPaid,handler=pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler#,
        #internalTicket.domainPeriod#,
        #internalTicket.charityCode,handler=pl.nask.crs.commons.dao.ibatis.handlers.StringHandler#,
        #internalTicket.autorenewMode,handler=pl.nask.crs.commons.dao.ibatis.handlers.CharToBooleanHandler#
        );
    </insert>

    <delete id="deleteTicket" parameterClass="long">
        DELETE FROM Ticket
        where T_Number=#id#
    </delete>

    <select id="getNameserversForTicket" parameterClass="java.lang.Long"
        resultMap="ticketNameserver">
        SELECT
        `TN_Name`,
        `TN_Name_Fail_Cd`,
        `TN_IPv4`,
        `TN_IPv4_Fail_Cd`,
        `TN_IPv6`,
        `TN_IPv6_Fail_Cd`
        FROM
        `TicketNameserver`
        WHERE
        `T_Number` = #id#
        ORDER BY
        `TN_Order` ASC
    </select>

    <insert id="createNameserversUsingHistory" parameterClass="long">
        INSERT INTO
        TicketNameserver (
        T_Number,
        TN_Name,
        TN_Name_Fail_Cd,
        TN_IPv4,
        TN_IPv4_Fail_Cd,
        TN_IPv6,
        TN_IPv6_Fail_Cd,
        TN_Order,
        TN_TS
        ) SELECT
        T_Number,
        TN_Name,
        TN_Name_Fail_Cd,
        TN_IPv4,
        TN_IPv4_Fail_Cd,
        TN_IPv6,
        TN_IPv6_Fail_Cd,
        TN_Order,
        TN_TS
        FROM TicketNameserverHist
        WHERE Chng_ID = #changeId#
    </insert>

    <delete id="deleteNameserversByChangeId" parameterClass="long">
        DELETE TN.*
        FROM TicketNameserver TN
        LEFT JOIN TicketHist TH ON TH.T_Number = TN.T_Number
        WHERE
        TH.Chng_ID = #changeId#
    </delete>

    <select id="getTicketNotification" resultMap="ticketNotification" parameterClass="java.util.Map">
        SELECT
        T_Number as ticketId,
        Notification_Period as notificationPeriod
        FROM Ticket_Notifications
        WHERE T_Number = #ticketId#
        AND Notification_Period = #notificationPeriod#
    </select>

    <insert id="createTicketNotification" parameterClass="pl.nask.crs.ticket.TicketNotification">
        INSERT INTO
        Ticket_Notifications(T_Number, Notification_Period)
        VALUES
        (#ticketId#, #notificationPeriod#)
    </insert>

</sqlMap>
