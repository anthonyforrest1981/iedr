<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

    <bean id="domainPermissionAspect"
        class="pl.nask.crs.app.authorization.aspects.DomainAuthorizationAspect">
        <constructor-arg ref="authorizationService" />
    </bean>

    <bean id="accountEditPermissionAspect"
        class="pl.nask.crs.app.authorization.aspects.AccountSaveAuthorizationAspect">
        <constructor-arg ref="authorizationService" />
    </bean>

    <bean id="simpleNamedPermissionAspect"
        class="pl.nask.crs.app.authorization.aspects.SimpleNamedPermissionAuthorizationAspect">
        <constructor-arg ref="authorizationService" />
    </bean>

    <bean id="nicHandleEditPermissionAspect"
        class="pl.nask.crs.app.authorization.aspects.NicHandleEditAuthorizationAspect">
        <constructor-arg ref="authorizationService" />
    </bean>

    <bean id="ticketNoCreatePermissionAspect"
        class="pl.nask.crs.app.authorization.aspects.TicketAuthorizationAspect">
        <constructor-arg ref="authorizationService" />
    </bean>

    <bean id="paymentPermissionAspect"
        class="pl.nask.crs.app.authorization.aspects.PaymentAuthorizationAspect">
        <constructor-arg ref="authorizationService" />
    </bean>

    <bean id="accountGetPermissionAspect"
        class="pl.nask.crs.app.authorization.aspects.AccountGetAuthorizationAspect">
        <constructor-arg ref="authorizationService" />
    </bean>

    <bean id="invoiceViewAspect"
        class="pl.nask.crs.app.authorization.aspects.InvoiceViewAspect">
        <constructor-arg ref="authorizationService" />
    </bean>

    <bean id="transactionViewAspect"
        class="pl.nask.crs.app.authorization.aspects.TransactionViewAspect">
        <constructor-arg ref="authorizationService" />
        <constructor-arg ref="transactionDAO" />
    </bean>

    <bean id="transactionHistViewAspect"
        class="pl.nask.crs.app.authorization.aspects.TransactionHistViewAspect">
        <constructor-arg ref="authorizationService" />
        <constructor-arg ref="transactionHistDAO" />
    </bean>

    <bean id="secondaryMarketBuyRequestAspect"
          class="pl.nask.crs.app.authorization.aspects.BuyRequestAuthorizationAspect">
        <constructor-arg ref="authorizationService" />
    </bean>

    <bean id="secondaryMarketSellRequestAspect"
          class="pl.nask.crs.app.authorization.aspects.SellRequestAuthorizationAspect">
        <constructor-arg ref="authorizationService" />
    </bean>

    <aop:config proxy-target-class="false">

        <aop:aspect ref="domainPermissionAspect">
            <aop:pointcut id="domainCheck"
                expression="
                execution(public * pl.nask.crs.app.commons.CommonAppService.generateOrProlongAuthCode(..)) ||
                execution(public * pl.nask.crs.app.commons.CommonAppService.modifyDomain(..)) ||
                execution(public * pl.nask.crs.app.commons.CommonAppService.modifyNameservers(..)) ||
                execution(public * pl.nask.crs.app.commons.CommonAppService.sendAuthCodeByEmail(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.checkPayAvailable(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.edit(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.enterVoluntaryNRP(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.findExtended(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.getAll(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.isEventValid(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.modifyRenewalMode(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.removeFromVoluntaryNRP(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.revertToBillable(..))  ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.save(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.search(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.updateHolderType(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.validateDomainToModify(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.view(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.viewPlain(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.findDomainReservations(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.payForDomainRenewal(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.canDomainBeSold(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.registerSellRequest(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.verifyAuthCode(..))
                " />
            <aop:before method="checkPermission"
                pointcut-ref="domainCheck" />
        </aop:aspect>

        <aop:aspect ref="accountEditPermissionAspect">
            <aop:pointcut id="accountEditCheck"
                expression="execution(public * pl.nask.crs.app.accounts.AccountAppService.save(..))" />
            <aop:before method="checkPermission"
                pointcut-ref="accountEditCheck" />
        </aop:aspect>

        <aop:aspect ref="nicHandleEditPermissionAspect">
            <aop:pointcut id="nicHandleCheck"
                expression="
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.canBeABillingContact(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.changePassword(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.get(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.history(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.modifyNicHandleOwnAccount(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.resetPassword(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.saveNewPassword(..))
                " />
            <aop:before method="checkPermission"
                pointcut-ref="nicHandleCheck" />

            <aop:pointcut id="nicHandleCheck5"
                expression="
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.search(..))
                " />
            <aop:before method="checkPermissionSearch"
                pointcut-ref="nicHandleCheck5" />
        </aop:aspect>

        <aop:aspect ref="ticketNoCreatePermissionAspect">
            <aop:pointcut id="ticketNoCreateCheckTicketId" expression="
                execution(public * pl.nask.crs.app.commons.CommonAppService.cancelTicketAsOwner(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.edit(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.save(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.updateAsOwner(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.view(..))
                " />
            <aop:before method="checkPermissionTicketId"
                    pointcut-ref="ticketNoCreateCheckTicketId" />

            <aop:pointcut id="ticketNoCreateCheckDomainName" expression="
                execution(public * pl.nask.crs.app.tickets.TicketAppService.getTicketForDomain(..))
                " />
            <aop:before method="checkPermissionDomainName"
                    pointcut-ref="ticketNoCreateCheckDomainName" />
        </aop:aspect>

        <aop:aspect ref="simpleNamedPermissionAspect">
            <aop:pointcut id="simpleOperations"
                expression="
                execution(public * pl.nask.crs.app.accounts.AccountAppService.alterStatus(..)) ||
                execution(public * pl.nask.crs.app.accounts.AccountAppService.create(..)) ||
                execution(public * pl.nask.crs.app.accounts.AccountAppService.history(..)) ||
                execution(public * pl.nask.crs.app.AppSearchService.search(..)) ||
                execution(public * pl.nask.crs.app.commons.CommonAppService.cleanupTicket(..)) ||
                execution(public * pl.nask.crs.app.commons.CommonAppService.getOwnerTypeByName(..)) ||
                execution(public * pl.nask.crs.app.commons.CommonAppService.getOwnerTypes(..)) ||
                execution(public * pl.nask.crs.app.commons.CommonAppService.isTransferPossible(..)) ||
                execution(public * pl.nask.crs.app.commons.CommonAppService.registerDomain(..)) ||
                execution(public * pl.nask.crs.app.commons.CommonAppService.transfer(..)) ||
                execution(public * pl.nask.crs.app.commons.CommonAppService.verifyAuthCode(..)) ||
                execution(public * pl.nask.crs.app.commons.CommonAppService.zoneCommit(..)) ||
                execution(public * pl.nask.crs.app.commons.CommonAppService.zonePublished(..)) ||
                execution(public * pl.nask.crs.app.commons.CommonAppService.zoneUnpublished(..)) ||
                execution(public * pl.nask.crs.app.config.ConfigAppService.*(..)) ||
                execution(public * pl.nask.crs.app.dnscheck.DnsNotificationAppService.sendNotifications(..)) ||
                execution(public * pl.nask.crs.app.document.DocumentAppService.*(..)) ||
                execution(public * pl.nask.crs.app.domains.BulkTransferAppService.*(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.authCodeCleanup(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.authCodePortalCleanup(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.bulkExportAuthCodes(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.checkAvailability(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.findDeletedDomains(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.findDomainAutorenewals(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.findDomainCountForContact(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.findDomainsForCurrentRenewal(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.findDomainsForFutureRenewal(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.findDomainsToAuthCodeCleanup(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.findDomainsToAuthCodePortalCleanup(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.findOwn(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.findOwnExtended(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.findOwnPlain(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.findOwnDeletedDomains(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.findTransferredAwayDomains(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.findTransferredInDomains(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.forceDSMEvent(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.forceDSMState(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.getDsmStates(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.getNsReports(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.getRelatedDomains(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.isCharity(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.lock(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.rollLockRenewalDates(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.runDeleteProcess(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.runDeletionDatePasses(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.runNotificationProcess(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.runRenewalDatePasses(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.runSuspensionDatePasses(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.searchFull(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.searchFullWithLockingActive(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.sendAuthCodeByEmail(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.sendWhoisDataEmail(..)) ||
                execution(public * pl.nask.crs.app.domains.DomainAppService.unlock(..)) ||
                execution(public * pl.nask.crs.app.email.EmailGroupAppService.*(..)) ||
                execution(public * pl.nask.crs.app.email.EmailTemplateAppService.*(..)) ||
                execution(public * pl.nask.crs.app.emaildisabler.EmailDisablerAppService.getAllFor(..)) ||
                execution(public * pl.nask.crs.app.emaildisabler.EmailDisablerAppService.getAllOfEmailGroup(..)) ||
                execution(public * pl.nask.crs.app.emaildisabler.EmailDisablerAppService.getAllOfTemplate(..)) ||
                execution(public * pl.nask.crs.app.emaildisabler.EmailDisablerAppService.modifySuppressionMode(..)) ||
                execution(public * pl.nask.crs.app.invoicing.InvoicingAppService.generateInvoice(..)) ||
                execution(public * pl.nask.crs.app.invoicing.InvoicingAppService.invalidateTransactionIfNeeded(..)) ||
                execution(public * pl.nask.crs.app.invoicing.InvoicingAppService.settleTransaction(..)) ||
                execution(public * pl.nask.crs.app.invoicing.InvoicingAppService.setTransactionStartedSettlement(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.addUserPermission(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.alterStatus(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.changeTfa(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.cleanupLoginAttempts(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.cleanupResetPassword(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.createNicHandle(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.createNicHandleOwnAccount(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.getDefaults(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.modifyNicHandle(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.removeDeletedNichandles(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.removeUserPermission(..)) ||
                execution(public * pl.nask.crs.app.nichandles.NicHandleAppService.saveDefaults(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.addPrice(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.addVatRate(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.autorenewAll(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.cleanupTransaction(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.correctDeposit(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.depositFunds(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.depositFundsOffline(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.findAllPrices(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.findAllTransactions(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.findDeposits(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.findDepositWithHistory(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.findExtendedReservations(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.findHistoricalReservations(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.findHistoricalTransactions(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.findInvoices(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.findOwnReservations(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.findTransactionsToCleanup(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.findUserHistoricalDeposits(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.findUserInvoices(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.getDomainPricing(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.getNotSettledReservationsTotals(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.getPrice(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.getReadyADPTransactionsReport(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.getRequestPrice(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.getSettledTransactionHistory(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.getTopUpHistory(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.getTransactionToReauthorise(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.getValid(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.getVatCategories(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.getVatRate(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.invalidate(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.modifyPrice(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.viewDeposit(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.viewMergedInvoices(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.viewUserDeposit(..)) ||
                execution(public * pl.nask.crs.app.reports.ReportsAppService.findTotalDomains(..)) ||
                execution(public * pl.nask.crs.app.reports.ReportsAppService.findTotalDomainsPerClass(..)) ||
                execution(public * pl.nask.crs.app.reports.ReportsAppService.findTotalDomainsPerDate(..)) ||
                execution(public * pl.nask.crs.app.reports.ReportsAppService.search(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.acceptBuyRequest(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.cancelSellRequest(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.canDomainBePurchased(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.checkinBuyRequest(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.checkoutBuyRequest(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.cleanupBuyRequest(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.completeSellRequest(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.deleteBuyRequestWithCompletedSale(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.deleteBuyRequestWithExpiredAuthCode(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.findBuyRequestNotifications(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.findBuyRequests(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.findBuyRequestsToCleanup(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.findBuyRequestsWithCompletedSales(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.findBuyRequestsWithExpiredAuthCode(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.findHistoricalBuyRequests(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.findHistoricalSellRequests(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.findOwnBuyRequests(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.findOwnSellRequests(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.findSellRequests(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.findSellRequestsToComplete(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.getBuyRequestHistory(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.getHistoricalBuyRequest(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.getHistoricalSellRequest(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.invalidateBuyRequest(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.isBuyRequestUsedInSale(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.modifyBuyRequestAsHostmaster(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.reassignBuyRequest(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.registerBuyRequest(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.regenerateAndResendAuthCode(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.rejectBuyRequest(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.saveBuyRequest(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.sendBuyRequestNotification(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.accept(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.alterStatus(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.checkIn(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.checkOut(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.findOwn(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.findTicketNotifications(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.findTicketsToCleanup(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.history(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.reassign(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.reject(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.revise(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.search(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.sendTicketExpirationEmail(..)) ||
                execution(public * pl.nask.crs.app.tickets.TicketAppService.updateAsAdmin(..)) ||
                execution(public * pl.nask.crs.app.triplepass.TriplePassAppService.getAdminPassedTickets(..)) ||
                execution(public * pl.nask.crs.app.triplepass.TriplePassAppService.performFinancialCheck(..)) ||
                execution(public * pl.nask.crs.app.triplepass.TriplePassAppService.performTechnicalCheck(..)) ||
                execution(public * pl.nask.crs.app.triplepass.TriplePassAppService.performTicketCancellation(..)) ||
                execution(public * pl.nask.crs.app.triplepass.TriplePassAppService.promoteModificationTicket(..)) ||
                execution(public * pl.nask.crs.app.triplepass.TriplePassAppService.promoteTicketToDomain(..)) ||
                execution(public * pl.nask.crs.app.triplepass.TriplePassAppService.promoteTransferTicket(..)) ||
                execution(public * pl.nask.crs.app.users.UserAppService.changePermissionGroups(..)) ||
                execution(public * pl.nask.crs.app.users.UserAppService.changeTfa(..)) ||
                execution(public * pl.nask.crs.app.users.UserAppService.getHistory(..)) ||
                execution(public * pl.nask.crs.app.users.UserAppService.getUser(..)) ||
                execution(public * pl.nask.crs.app.users.UserAppService.getUserLevel(..)) ||
                execution(public * pl.nask.crs.app.users.UserAppService.isTfaUsed(..)) ||
                execution(public * pl.nask.crs.security.authentication.WsAuthenticationService.getCompleteUser(..)) ||
                execution(public * pl.nask.crs.security.authentication.WsAuthenticationService.isUserSwitched(..)) ||
                execution(public * pl.nask.crs.security.authentication.WsAuthenticationService.logout(..)) ||
                execution(public * pl.nask.crs.security.authentication.WsAuthenticationService.switchUser(..)) ||
                execution(public * pl.nask.crs.security.authentication.WsAuthenticationService.unswitch(..)) ||
                execution(public * pl.nask.crs.security.authentication.WsAuthenticationService.validateAndRefreshToken(..))
                " />
            <aop:before method="checkPermission"
                pointcut-ref="simpleOperations" />
        </aop:aspect>

        <aop:aspect ref="accountGetPermissionAspect">
            <aop:pointcut id="getOperation"
                expression="
                execution(public * pl.nask.crs.app.accounts.AccountAppService.get(..))
                " />
            <aop:before method="checkPermission"
                pointcut-ref="getOperation" />
        </aop:aspect>

        <aop:aspect ref="invoiceViewAspect">
            <aop:pointcut id="viewPermissionCheck"
                expression="
                execution(public * pl.nask.crs.app.payment.PaymentAppService.getInvoiceInfo(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.sendEmailWithInvoices(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.viewPdfInvoice(..)) ||
                execution(public * pl.nask.crs.app.payment.PaymentAppService.viewXmlInvoice(..))
                " />
            <aop:before method="checkPermission"
                pointcut-ref="viewPermissionCheck" />
        </aop:aspect>

        <aop:aspect ref="transactionViewAspect">
            <aop:pointcut id="viewTransactionCheck"
                expression="
                execution(public * pl.nask.crs.app.commons.CommonAppService.reauthoriseTransaction(..))
                " />
            <aop:before method="checkPermission"
                pointcut-ref="viewTransactionCheck" />
        </aop:aspect>

        <aop:aspect ref="transactionHistViewAspect">
            <aop:pointcut id="viewTransactionHistCheck"
                expression="
                execution(public * pl.nask.crs.app.payment.PaymentAppService.getTransactionInfo(..))
                " />
            <aop:before method="checkPermission"
                pointcut-ref="viewTransactionHistCheck" />
        </aop:aspect>

        <aop:aspect ref="secondaryMarketBuyRequestAspect">
            <aop:pointcut id="secondaryMarketBuyRequestCheck" expression="
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.cancelBuyRequest(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.getBuyRequest(..)) ||
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.modifyBuyRequest(..))
                " />
            <aop:before method="checkPermission"
                    pointcut-ref="secondaryMarketBuyRequestCheck" />
        </aop:aspect>

        <aop:aspect ref="secondaryMarketSellRequestAspect">
            <aop:pointcut id="secondaryMarketSellRequestCheck" expression="
                execution(public * pl.nask.crs.app.secondarymarket.SecondaryMarketAppService.getSellRequest(..))
                " />
            <aop:before method="checkPermission"
                    pointcut-ref="secondaryMarketSellRequestCheck" />
        </aop:aspect>
    </aop:config>
</beans>
