package pl.nask.crs.regression;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import pl.nask.crs.api.payment.CRSPaymentAppService;
import pl.nask.crs.api.vo.AuthenticatedUserVO;
import pl.nask.crs.api.vo.CreditCardVO;
import pl.nask.crs.api.vo.DomainWithPeriodVO;
import pl.nask.crs.commons.TestOpInfo;
import pl.nask.crs.commons.email.service.EmailTemplateNamesEnum;
import pl.nask.crs.commons.email.service.ParameterNameEnum;
import pl.nask.crs.domains.dsm.DomainStateMachine;
import pl.nask.crs.domains.services.DomainService;
import pl.nask.crs.payment.PaymentMethod;
import pl.nask.crs.security.authentication.WsAuthenticationService;

/**
 * Test for bugs #10799, 10776
 * https://drotest4.nask.net.pl:3000/issues/10799
 * https://drotest4.nask.net.pl:3000/issues/10776
 *
 * TRANSACTION_DETAIL and TRANSACTION_VALUE are not populated into the email template.
 * This is because they are not visible to DSM which triggers sending mentioned emails.
 *
 * This happens when the payment for domain in NRP is made - emails sent when the invoice is being settled are generated correctly.
 *
 * Have to check, if email parameters generated by the Email actions used by DSM contain those parameters.
 *
 * (C) Copyright 2013 NASK
 * Software Research & Development Department
 *
 * @author Artur Gniadzik
 *
 */
public class PaymentEmailTest extends AbstractEmailsTest {

    final String domainName = "paydomain.ie";
    final String userName = "APITEST-IEDR";

    @Autowired
    WsAuthenticationService authService;

    @Autowired
    CRSPaymentAppService paymentService;
    DomainStateMachine dsm;
    @Autowired
    DomainService domainService;

    private AuthenticatedUserVO user;
    private Set<ParameterNameEnum> populatedParams = new HashSet<ParameterNameEnum>(Arrays.asList(
            ParameterNameEnum.TRANSACTION_DETAIL, ParameterNameEnum.TRANSACTION_VALUE, ParameterNameEnum.ORDER_ID));

    @Test
    public void testParametersPresentForVmAdpPayments() throws Exception {
        testWithParams(20, PaymentMethod.ADP, null, EmailTemplateNamesEnum.ADP_PAYMENT_INITIATED_VNRP);
    }

    @Test
    public void testParametersPresentForVmCcPayments() throws Exception {
        testWithParams(20, PaymentMethod.CC, createBasicCreditCard(), EmailTemplateNamesEnum.CC_PAYMENT_INITIATED_VNRP);
    }

    @Test
    public void testParametersPresentForImAdpPayments() throws Exception {
        testWithParams(18, PaymentMethod.ADP, null, EmailTemplateNamesEnum.ADP_PAYMENT_INITIATED_INRP);
    }

    @Test
    public void testParametersPresentForImCcPayments() throws Exception {
        testWithParams(18, PaymentMethod.CC, createBasicCreditCard(), EmailTemplateNamesEnum.CC_PAYMENT_INITIATED_INRP);
    }

    @Test(enabled = false)
    private void testWithParams(int nrpState, PaymentMethod method, CreditCardVO card,
            EmailTemplateNamesEnum emailTemplate)
            throws Exception {
        domainService.forceDSMState(Arrays.asList(domainName), nrpState, new TestOpInfo("test", null, "test"));
        List<DomainWithPeriodVO> domains = Arrays.asList(new DomainWithPeriodVO(domainName, 1));
        createExpectations(emailTemplate.getId(), populatedParams);
        paymentService.payForDomainRenewal(user, domains, method, card);
    }

    @BeforeMethod
    public void authenticate() throws Exception {
        user = new AuthenticatedUserVO(authService.authenticate(userName, "Passw0rd!", false, "1.1.1.1", false, null,
                true, "ws"));
    }

    public static CreditCardVO createBasicCreditCard() {
        CreditCardVO creditCard = new CreditCardVO();
        creditCard.setCardNumber("4263971921001307");
        creditCard.setCardType("VISA");
        creditCard.setCardHolderName("John Doe");
        creditCard.setCardExpDate("0115");
        return creditCard;
    }
}
