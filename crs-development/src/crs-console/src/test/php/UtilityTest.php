<?php

class UtilityTest extends PHPUnit_Framework_TestCase {

    public function testCurrencyAmount() {
        $this->assertEquals(0, Utility::currencyAmount(null));
        $this->assertEquals('&euro;&nbsp;1.00', Utility::currencyAmount(1));
        $this->assertEquals('&euro;&nbsp;1.00', Utility::currencyAmount(1, "EUR"));
        $this->assertEquals('$&nbsp;1.00', Utility::currencyAmount(1, "USD"));
        $this->assertEquals('¬£&nbsp;1.00', Utility::currencyAmount(1, "GBP"));
        $this->assertEquals('$&nbsp;1.99', Utility::currencyAmount(1.99, "USD"));
        $this->assertEquals('$&nbsp;1.99', Utility::currencyAmount(1.991, "USD"));
        $this->assertEquals('$&nbsp;1,000.01', Utility::currencyAmount(1000.01, "USD"));
        $this->assertEquals('$&nbsp;1,000,000.01', Utility::currencyAmount(1000000.01, "USD"));
    }

    public function testMbTrim() {
        // Latin Extended-A
        $this->assertEquals("ƒÇ", Utility::mb_trim("  ƒÇ   "));
        // Latin Extended-B
        $this->assertEquals("»¶", Utility::mb_trim("  »¶   "));
        // emoji, tab and non-breakable space
        $this->assertEquals("üò∏", Utility::mb_trim("   üò∏\t "));
        // check custom characters
        $this->assertEquals("ƒÇ", Utility::mb_trim(" , ƒÇ ; ::", ',:;'));
        // check only custom characters
        $this->assertEquals(" ƒÇ; ", Utility::mb_trim(",, ƒÇ; ,", ',', true));
    }

    public function testMbRTrim() {
        // Latin Extended-A
        $this->assertEquals("  ƒÇ", Utility::mb_rtrim("  ƒÇ   "));
        // Latin Extended-B
        $this->assertEquals("  »¶", Utility::mb_rtrim("  »¶   "));
        // emoji, tab and non-breakable space
        $this->assertEquals("   üò∏", Utility::mb_rtrim("   üò∏\t "));
        // check custom characters
        $this->assertEquals(" , ƒÇ ; ", Utility::mb_rtrim(" , ƒÇ ; ::", ',:;'));
        // check only custom characters
        $this->assertEquals(",, ƒÇ; ", Utility::mb_rtrim(",, ƒÇ; ,", ','));
    }

    public function testMbStrSplit() {
        $this->assertEquals(array("ƒö","∆ú","üòÑ","üöÄ"), Utility::mb_str_split("ƒö∆úüòÑüöÄ"));
    }

    public function testGlueRequired() {
        $this->assertTrue(Utility::isGlueRequired("d√≥m√°√≠n.ie", "ns.d√≥m√°√≠n.ie"));
        $this->assertTrue(Utility::isGlueRequired("xn--dmn-fla4d7a.ie", "ns.d√≥m√°√≠n.ie"));
        $this->assertTrue(Utility::isGlueRequired("d√≥m√°√≠n.ie", "ns.xn--dmn-fla4d7a.ie"));
        $this->assertTrue(Utility::isGlueRequired("xn--dmn-fla4d7a.ie", "ns.xn--dmn-fla4d7a.ie"));
        $this->assertFalse(Utility::isGlueRequired("dom√°√≠n.ie", "ns.d√≥m√°√≠n.ie"));
        $this->assertFalse(Utility::isGlueRequired("xn--dmn-fla4d7a.ie", "ns.dom√°√≠n.ie"));
        $this->assertFalse(Utility::isGlueRequired("dom√°√≠n.ie", "ns.xn--dmn-fla4d7a.ie"));
        $this->assertFalse(Utility::isGlueRequired("xn--domn-7na6e.ie", "ns.xn--dmn-fla4d7a.ie"));
        $this->assertTrue(Utility::isGlueRequired("D√≥m√°√≠n.ie", "ns.d√≥m√°√≠n.ie"));
        $this->assertTrue(Utility::isGlueRequired("D√≥m√°√≠n.ie", "ns.D√≥m√°√≠n.ie"));
        $this->assertFalse(Utility::isGlueRequired("Dom√°√≠n.ie", "ns.d√≥m√°√≠n.ie"));
        $this->assertFalse(Utility::isGlueRequired("dom√°√≠n.ie", "ns.D√≥m√°√≠n.ie"));
    }

}
